; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

	TITLE	D:\User\Desktop\Everythin' for BSTU\Narkevich\All laboratory works\2-ой семестр\решения лбр\LBR_03\LBR_01\Debug\monthName.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__CD417A16_concurrencysal@h DB 01H
__18C11F8D_sal@h DB 01H
__BD42D05E_vadefs@h DB 01H
__2DC9DF70_vcruntime@h DB 01H
__C9149A6D_xkeycheck@h DB 01H
__94F3B4AE_yvals_core@h DB 01H
__7B399007_limits@h DB 01H
__1AB9F2C2_climits DB 01H
__04C75F1C_corecrt@h DB 01H
__E81B5085_vcruntime_new@h DB 01H
__130137D5_vcruntime_new_debug@h DB 01H
__8CF369C8_crtdbg@h DB 01H
__95C621C9_crtdefs@h DB 01H
__FEED0ABF_use_ansi@h DB 01H
__2816668F_yvals@h DB 01H
__92857972_corecrt_math@h DB 01H
__A29DED85_math@h DB 01H
__494656A0_corecrt_malloc@h DB 01H
__0C5B3DCC_stddef@h DB 01H
__F1F53BCE_corecrt_search@h DB 01H
__DD5AA43A_corecrt_wstdlib@h DB 01H
__71F46169_stdlib@h DB 01H
__9E56D030_cstdlib DB 01H
__05E338F6_xtr1common DB 01H
__99FA516B_intrin0@inl@h DB 01H
__8CEB98C2_intrin0@h DB 01H
__7A7B113A_cmath DB 01H
__C44F8F6B_corecrt_stdio_config@h DB 01H
__A7F89B2B_corecrt_wstdio@h DB 01H
__B5C48800_stdio@h DB 01H
__A651C215_cstdio DB 01H
__15E49872_errno@h DB 01H
__6BB4896E_vcruntime_string@h DB 01H
__184F7456_corecrt_memcpy_s@h DB 01H
__82377222_corecrt_memory@h DB 01H
__5B29309E_corecrt_wstring@h DB 01H
__F787F5CD_string@h DB 01H
__D2C478D0_cstring DB 01H
__E387ED1C_corecrt_wconio@h DB 01H
__78D0C915_corecrt_wctype@h DB 01H
__02A4DD57_corecrt_wdirect@h DB 01H
__A056EFF3_corecrt_share@h DB 01H
__91FC0EDF_corecrt_wio@h DB 01H
__6619318A_corecrt_wprocess@h DB 01H
__18070508_corecrt_wtime@h DB 01H
__3D2AFB26_types@h DB 01H
__72103B05_stat@h DB 01H
__4BE26BFD_wchar@h DB 01H
__3CDA1446_cwchar DB 01H
__3B9D0A9D_cstddef DB 01H
__D7870C25_initializer_list DB 01H
__5E44C2A9_xstddef DB 01H
__7F1A9170_iosfwd DB 01H
__C54FBE38_stdint@h DB 01H
__2308314D_cstdint DB 01H
__87BD5CA6_type_traits DB 01H
__A95B55BB_utility DB 01H
__EE76B579___msvc_iter_core@hpp DB 01H
__A997C6C5_xutility DB 01H
__B83B7185_iterator DB 01H
__83BF90D8_share@h DB 01H
__9D384591___msvc_system_error_abi@hpp DB 01H
__3B70B6EE_cerrno DB 01H
__E5D9469F_malloc@h DB 01H
__C78E68C1_corecrt_terminate@h DB 01H
__510B0051_eh@h DB 01H
__1BEF3287_vcruntime_exception@h DB 01H
__5D994F5F_exception DB 01H
__CDB0EEF0_float@h DB 01H
__D5150992_cfloat DB 01H
__B83F831D_isa_availability@h DB 01H
__B3F344F6_limits DB 01H
__7E4C13A5_new DB 01H
__5795C389_xatomic@h DB 01H
__C3CE3678_xmemory DB 01H
__B71DB0E4_xstring DB 01H
__D4D77502_stdexcept DB 01H
__D76B6AFE_xcall_once@h DB 01H
__80837380_xerrc@h DB 01H
__93FD7E51_time@h DB 01H
__BCC88D32_ctime DB 01H
__1F532584_xtimec@h DB 01H
__9FA33D0C_xthreads@h DB 01H
__D8C61834_atomic DB 01H
__683678DE_system_error DB 01H
__FA9853E6_vcruntime_typeinfo@h DB 01H
__D94835DC_typeinfo DB 01H
__0F5D4878_memory DB 01H
__23181F77_xfacet DB 01H
__274043E2___msvc_xlocinfo_types@hpp DB 01H
__6AECDA3E_ctype@h DB 01H
__A99A25B2_cctype DB 01H
__66B29864_locale@h DB 01H
__0DFA0CE1_clocale DB 01H
__C6C1D614_xlocinfo DB 01H
__6823C4D5_xlocale DB 01H
__FF24A107_xiosbase DB 01H
__D677CDBE_streambuf DB 01H
__F6A4A2C2_xlocnum DB 01H
__868129B3_ios DB 01H
__7B331E11_ostream DB 01H
__18E32B2B_istream DB 01H
__CBEEBCDA_iostream DB 01H
__1EA7981F_Time@h DB 01H
__5EC8F362_LeapOrNot@h DB 01H
__9701E443_NumberOfDay@h DB 01H
__29988775_To_congratulate@h DB 01H
__D8D58B4A_monthName@h DB 01H
__6CE96504_Incorrect_Data_yes_or_no@h DB 01H
__1E5359E2_stdafx@h DB 01H
__0393C2D9_monthName@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IAE@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z	; std::_Char_traits<char,int>::copy
PUBLIC	?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z	; std::_Char_traits<char,int>::move
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	?monthName@@YAXH@Z				; monthName
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Convert_size@II@std@@YAII@Z			; std::_Convert_size<unsigned int,unsigned int>
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$max@I@std@@YAABIABI0@Z			; std::max<unsigned int>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z	; std::_Voidify_iter<char * *>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$_Get_size_of_n@$00@std@@YAII@Z		; std::_Get_size_of_n<1>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_06PIPEDJMI@?$PP?m?b?$OA?p?$PP@		; `string'
PUBLIC	??_C@_07EDDANKEJ@?t?e?b?p?$OA?k?$PP@		; `string'
PUBLIC	??_C@_05GJDHAAIP@?l?$OA?p?r?$OA@		; `string'
PUBLIC	??_C@_06BJCHAMKF@?$OA?o?p?e?k?$PP@		; `string'
PUBLIC	??_C@_03HINEPDLB@?l?$OA?$PP@			; `string'
PUBLIC	??_C@_04HFNOFLOJ@?h?$PO?m?$PP@			; `string'
PUBLIC	??_C@_04HBFDCHFL@?h?$PO?k?$PP@			; `string'
PUBLIC	??_C@_07MEJCNEPI@?$OA?b?c?s?q?r?$OA@		; `string'
PUBLIC	??_C@_08OLCBAHDL@?q?e?m?r?$PP?a?p?$PP@		; `string'
PUBLIC	??_C@_07HBEKDJPN@?n?j?r?$PP?a?p?$PP@		; `string'
PUBLIC	??_C@_06KOONPCNH@?m?n?$PP?a?p?$PP@		; `string'
PUBLIC	??_C@_07BLPHNFHJ@?d?e?j?$OA?a?p?$PP@		; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_strlen:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	__imp__setlocale:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BLPHNFHJ@?d?e?j?$OA?a?p?$PP@
CONST	SEGMENT
??_C@_07BLPHNFHJ@?d?e?j?$OA?a?p?$PP@ DB 0e4H, 0e5H, 0eaH, 0e0H, 0e1H, 0f0H
	DB	0ffH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06KOONPCNH@?m?n?$PP?a?p?$PP@
CONST	SEGMENT
??_C@_06KOONPCNH@?m?n?$PP?a?p?$PP@ DB 0edH, 0eeH, 0ffH, 0e1H, 0f0H, 0ffH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07HBEKDJPN@?n?j?r?$PP?a?p?$PP@
CONST	SEGMENT
??_C@_07HBEKDJPN@?n?j?r?$PP?a?p?$PP@ DB 0eeH, 0eaH, 0f2H, 0ffH, 0e1H, 0f0H
	DB	0ffH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08OLCBAHDL@?q?e?m?r?$PP?a?p?$PP@
CONST	SEGMENT
??_C@_08OLCBAHDL@?q?e?m?r?$PP?a?p?$PP@ DB 0f1H, 0e5H, 0edH, 0f2H, 0ffH, 0e1H
	DB	0f0H, 0ffH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEJCNEPI@?$OA?b?c?s?q?r?$OA@
CONST	SEGMENT
??_C@_07MEJCNEPI@?$OA?b?c?s?q?r?$OA@ DB 0e0H, 0e2H, 0e3H, 0f3H, 0f1H, 0f2H
	DB	0e0H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04HBFDCHFL@?h?$PO?k?$PP@
CONST	SEGMENT
??_C@_04HBFDCHFL@?h?$PO?k?$PP@ DB 0e8H, 0feH, 0ebH, 0ffH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HFNOFLOJ@?h?$PO?m?$PP@
CONST	SEGMENT
??_C@_04HFNOFLOJ@?h?$PO?m?$PP@ DB 0e8H, 0feH, 0edH, 0ffH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HINEPDLB@?l?$OA?$PP@
CONST	SEGMENT
??_C@_03HINEPDLB@?l?$OA?$PP@ DB 0ecH, 0e0H, 0ffH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BJCHAMKF@?$OA?o?p?e?k?$PP@
CONST	SEGMENT
??_C@_06BJCHAMKF@?$OA?o?p?e?k?$PP@ DB 0e0H, 0efH, 0f0H, 0e5H, 0ebH, 0ffH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GJDHAAIP@?l?$OA?p?r?$OA@
CONST	SEGMENT
??_C@_05GJDHAAIP@?l?$OA?p?r?$OA@ DB 0ecH, 0e0H, 0f0H, 0f2H, 0e0H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDDANKEJ@?t?e?b?p?$OA?k?$PP@
CONST	SEGMENT
??_C@_07EDDANKEJ@?t?e?b?p?$OA?k?$PP@ DB 0f4H, 0e5H, 0e2H, 0f0H, 0e0H, 0ebH
	DB	0ffH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06PIPEDJMI@?$PP?m?b?$OA?p?$PP@
CONST	SEGMENT
??_C@_06PIPEDJMI@?$PP?m?b?$OA?p?$PP@ DB 0ffH, 0edH, 0e2H, 0e0H, 0f0H, 0ffH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '4', 00H, '.', 00H, '3', 00H, '1', 00H, '9'
	DB	00H, '3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'34.31933\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA DD 091H ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	040fH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$0
__tryblocktable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$3
__unwindtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	032H
	DW	01adH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z$0
__ehfuncinfo$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	097H
	DB	0a4H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	033H
	DW	01d6H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?monthName@@YAXH@Z DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$?monthName@@YAXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?monthName@@YAXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?monthName@@YAXH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?monthName@@YAXH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?monthName@@YAXH@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?monthName@@YAXH@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?monthName@@YAXH@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?monthName@@YAXH@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?monthName@@YAXH@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?monthName@@YAXH@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?monthName@@YAXH@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?monthName@@YAXH@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?monthName@@YAXH@Z$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?monthName@@YAXH@Z$12
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	022H
	DB	090H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	024H
	DB	0adH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	024H
	DB	090H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	024H
	DB	076H
voltbl	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -32						; size = 4
__Ptr_container$ = -20					; size = 4
__Block_size$ = -8					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0000f	b9 09 00 00 00	 mov	 ecx, 9
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00025	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00028	83 c0 27	 add	 eax, 39			; 00000027H
  0002b	89 45 f8	 mov	 DWORD PTR __Block_size$[ebp], eax

; 130  :     if (_Block_size <= _Bytes) {

  0002e	8b 45 f8	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00031	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00034	77 05		 ja	 SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

  00036	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0003b	8b 45 f8	 mov	 eax, DWORD PTR __Block_size$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  00044	83 c4 04	 add	 esp, 4
  00047	89 45 ec	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004a	83 7d ec 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  0004e	74 02		 je	 SHORT $LN7@Allocate_m
  00050	eb 5c		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00052	8b f4		 mov	 esi, esp
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0005e	6a 00		 push	 0
  00060	68 87 00 00 00	 push	 135			; 00000087H
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
  0006a	6a 02		 push	 2
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00072	83 c4 18	 add	 esp, 24			; 00000018H
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	83 f8 01	 cmp	 eax, 1
  0007f	75 01		 jne	 SHORT $LN12@Allocate_m
  00081	cc		 int	 3
$LN12@Allocate_m:
  00082	8b f4		 mov	 esi, esp
  00084	6a 00		 push	 0
  00086	68 87 00 00 00	 push	 135			; 00000087H
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000a0	83 c4 14	 add	 esp, 20			; 00000014H
  000a3	3b f4		 cmp	 esi, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	33 c0		 xor	 eax, eax
  000ac	75 a4		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  000ae	33 c0		 xor	 eax, eax
  000b0	75 98		 jne	 SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000b2	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  000b5	83 c0 27	 add	 eax, 39			; 00000027H
  000b8	83 e0 e0	 and	 eax, -32		; ffffffe0H
  000bb	89 45 e0	 mov	 DWORD PTR __Ptr$[ebp], eax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000be	b8 04 00 00 00	 mov	 eax, 4
  000c3	6b c8 ff	 imul	 ecx, eax, -1
  000c6	8b 55 e0	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000c9	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  000cc	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

  000cf	b8 04 00 00 00	 mov	 eax, 4
  000d4	6b c8 fe	 imul	 ecx, eax, -2
  000d7	8b 55 e0	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000da	c7 04 0a fa fa
	fa fa		 mov	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

  000e1	8b 45 e0	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 143  : }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __87BD5CA6_type_traits
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1427 : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00021	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00024	c1 e0 03	 shl	 eax, 3
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00031	83 c4 08	 add	 esp, 8

; 669  :         }
; 670  :     }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1425 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __87BD5CA6_type_traits
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1427 : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 200  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __A997C6C5_xutility
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00021	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __5E44C2A9_xstddef
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 281  :     return __builtin_addressof(_Val);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 282  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Overflow_is_possible$ = -5				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0000f	b9 03 00 00 00	 mov	 ecx, 3
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00025	c6 45 fb 00	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 0

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 60   :         if (_Count > _Max_possible) {
; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00029	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 66   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 123  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __7B331E11_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 124  :             return _Ok;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 125  :         }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -229						; size = 1
__Zero_uncaught_exceptions$ = -29			; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 108  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __7B331E11_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 109  : #if !_HAS_EXCEPTIONS
; 110  :             const bool _Zero_uncaught_exceptions = true;
; 111  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 112  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00049	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0004e	0f b6 c0	 movzx	 eax, al
  00051	85 c0		 test	 eax, eax
  00053	75 09		 jne	 SHORT $LN4@sentry
  00055	c6 85 1b ff ff
	ff 01		 mov	 BYTE PTR tv72[ebp], 1
  0005c	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  0005e	c6 85 1b ff ff
	ff 00		 mov	 BYTE PTR tv72[ebp], 0
$LN5@sentry:
  00065	8a 8d 1b ff ff
	ff		 mov	 cl, BYTE PTR tv72[ebp]
  0006b	88 4d e3	 mov	 BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 113  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 114  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 115  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 116  : 
; 117  :             if (_Zero_uncaught_exceptions) {

  0006e	0f b6 45 e3	 movzx	 eax, BYTE PTR __Zero_uncaught_exceptions$[ebp]
  00072	85 c0		 test	 eax, eax
  00074	74 14		 je	 SHORT $LN1@sentry

; 118  :                 this->_Myostr._Osfx();

  00076	8b f4		 mov	 esi, esp
  00078	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 119  :             }
; 120  :         }

  0008a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
  000b1	cc		 int	 3
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Tied$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 91   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0001e	b9 06 00 00 00	 mov	 ecx, 6
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __7B331E11_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00049	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 92   :             if (!_Ostr.good()) {

  0005c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00064	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00067	8b f4		 mov	 esi, esp
  00069	8b ca		 mov	 ecx, edx
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	0f b6 c0	 movzx	 eax, al
  0007b	85 c0		 test	 eax, eax
  0007d	75 09		 jne	 SHORT $LN2@sentry

; 93   :                 _Ok = false;

  0007f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00082	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 94   :                 return;

  00086	eb 6a		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 95   :             }
; 96   : 
; 97   :             const auto _Tied = _Ostr.tie();

  00088	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00090	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00093	8b f4		 mov	 esi, esp
  00095	8b ca		 mov	 ecx, edx
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	89 45 e0	 mov	 DWORD PTR __Tied$[ebp], eax

; 98   :             if (!_Tied || _Tied == &_Ostr) {

  000a7	83 7d e0 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  000ab	74 08		 je	 SHORT $LN4@sentry
  000ad	8b 45 e0	 mov	 eax, DWORD PTR __Tied$[ebp]
  000b0	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b3	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 99   :                 _Ok = true;

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 100  :                 return;

  000bc	eb 34		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 101  :             }
; 102  : 
; 103  :             _Tied->flush();

  000be	8b f4		 mov	 esi, esp
  000c0	8b 4d e0	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 104  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000d0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000d8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000db	8b f4		 mov	 esi, esp
  000dd	8b ca		 mov	 ecx, edx
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000e5	3b f4		 cmp	 esi, esp
  000e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ec	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 105  :         }

  000f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00106	59		 pop	 ecx
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00110	3b ec		 cmp	 ebp, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 77   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __7B331E11_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 78   :             const auto _Rdbuf = _Myostr.rdbuf();

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00054	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00062	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00065	8b f4		 mov	 esi, esp
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	89 45 e0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 79   :             if (_Rdbuf) {

  00077	83 7d e0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0007b	74 16		 je	 SHORT $LN3@Sentry_bas

; 80   :                 _Rdbuf->_Unlock();

  0007d	8b 45 e0	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00080	8b 10		 mov	 edx, DWORD PTR [eax]
  00082	8b f4		 mov	 esi, esp
  00084	8b 4d e0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00087	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008a	ff d0		 call	 eax
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 81   :             }
; 82   :         }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
  000b6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 70   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __7B331E11_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 71   :             const auto _Rdbuf = _Myostr.rdbuf();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  0003d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004e	8b f4		 mov	 esi, esp
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 72   :             if (_Rdbuf) {

  00060	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00064	74 16		 je	 SHORT $LN1@Sentry_bas

; 73   :                 _Rdbuf->_Lock();

  00066	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00069	8b 10		 mov	 edx, DWORD PTR [eax]
  0006b	8b f4		 mov	 esi, esp
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00070	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00073	ff d0		 call	 eax
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 74   :             }
; 75   :         }

  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00021	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00028	72 0e		 jb	 SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00033	83 c4 04	 add	 esp, 4
  00036	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00038	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0003c	74 0e		 je	 SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

  0003e	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  00047	83 c4 04	 add	 esp, 4
  0004a	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0004c	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 239  : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -20					; size = 4
__Overflow_is_possible$ = -5				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  0000f	b9 06 00 00 00	 mov	 ecx, 6
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00025	c6 45 fb 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00029	c7 45 ec ff ff
	ff 1f		 mov	 DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 60   :         if (_Count > _Max_possible) {

  00030	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00037	76 05		 jbe	 SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00039	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0003e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00041	c1 e0 03	 shl	 eax, 3
$LN3@Get_size_o:

; 66   : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z PROC		; std::_Voidify_iter<char * *>, COMDAT

; 200  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __A997C6C5_xutility
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00021	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z ENDP		; std::_Voidify_iter<char * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __5E44C2A9_xstddef
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 281  :     return __builtin_addressof(_Val);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 282  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 224  :     is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0000f	b9 03 00 00 00	 mov	 ecx, 3
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __A997C6C5_xutility
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00025	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  0002e	83 c4 04	 add	 esp, 4
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z ; std::_Voidify_iter<char * *>
  00037	83 c4 04	 add	 esp, 4
  0003a	50		 push	 eax
  0003b	6a 04		 push	 4
  0003d	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00042	83 c4 08	 add	 esp, 8
  00045	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ??$forward@ABQAD@std@@YAABQADABQAD@Z ; std::forward<char * const &>
  00054	83 c4 04	 add	 esp, 4
  00057	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	8b 00		 mov	 eax, DWORD PTR [eax]
  0005f	89 02		 mov	 DWORD PTR [edx], eax

; 232  :     }
; 233  : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 293  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __5E44C2A9_xstddef
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 294  :     return _Ptr;

  00021	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1340 :     _CONSTEXPR20 ~_Container_proxy_ptr12() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1341 :         if (_Ptr) {

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00030	74 15		 je	 SHORT $LN3@Container_

; 1342 :             _Delete_plain_internal(_Al, _Ptr);

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	51		 push	 ecx
  00038	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00044	83 c4 08	 add	 esp, 8
$LN3@Container_:

; 1343 :         }
; 1344 :     }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
__Al_$ = 8						; size = 4
__Mycont$ = 12						; size = 4
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1326 :     _CONSTEXPR20 _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  00010	b9 06 00 00 00	 mov	 ecx, 6
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Basic_container_proxy_ptr12@std@@IAE@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  00038	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1327 :         // create a new _Container_proxy pointing at _Mycont
; 1328 :         _Ptr = _Unfancy(_Al_.allocate(1));

  0003b	6a 01		 push	 1
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  00040	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0004b	83 c4 04	 add	 esp, 4
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	89 01		 mov	 DWORD PTR [ecx], eax

; 1329 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

  00053	8b 45 0c	 mov	 eax, DWORD PTR __Mycont$[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
  0005c	83 c4 04	 add	 esp, 4
  0005f	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00065	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0006b	51		 push	 ecx
  0006c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0006f	8b 02		 mov	 eax, DWORD PTR [edx]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00077	83 c4 08	 add	 esp, 8

; 1330 :         _Mycont._Myproxy = _Ptr;

  0007a	8b 45 0c	 mov	 eax, DWORD PTR __Mycont$[ebp]
  0007d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	8b 11		 mov	 edx, DWORD PTR [ecx]
  00082	89 10		 mov	 DWORD PTR [eax], edx

; 1331 :     }

  00084	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00090	3b ec		 cmp	 ebp, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 980  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0001d	33 c9		 xor	 ecx, ecx
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  0003c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 981  :     // deallocate a plain pointer using an allocator
; 982  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 983  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 984  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

  00041	6a 01		 push	 1
  00043	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00046	50		 push	 eax
  00047	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH

; 985  :     } else {
; 986  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 987  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 988  :     }
; 989  : }

  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
  00072	cc		 int	 3
  00073	cc		 int	 3
  00074	cc		 int	 3
  00075	cc		 int	 3
  00076	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
_TEXT	SEGMENT
tv405 = -332						; size = 8
tv290 = -324						; size = 4
tv287 = -324						; size = 8
tv285 = -324						; size = 4
tv324 = -320						; size = 8
tv289 = -320						; size = 4
tv284 = -320						; size = 4
tv286 = -316						; size = 4
tv135 = -316						; size = 4
tv288 = -313						; size = 1
tv283 = -313						; size = 1
$T2 = -308						; size = 4
$T3 = -296						; size = 4
$T4 = -284						; size = 4
$T5 = -272						; size = 4
$T6 = -260						; size = 4
__Ok$ = -56						; size = 8
__Pad$ = -40						; size = 4
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Data$ = 12						; size = 4
__Size$ = 16						; size = 4
??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z PROC ; std::_Insert_string<char,std::char_traits<char>,unsigned int>, COMDAT

; 506  :     basic_ostream<_Elem, _Traits>& _Ostr, const _Elem* const _Data, const _SizeT _Size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 74 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-140]
  00021	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 507  :     // insert a character-type sequence into _Ostr as if through a basic_string copy
; 508  :     using _Ostr_t                    = basic_ostream<_Elem, _Traits>;
; 509  :     typename _Ostr_t::iostate _State = _Ostr_t::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 510  : 
; 511  :     _SizeT _Pad;
; 512  :     if (_Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size) {

  00055	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0005d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00060	8b f4		 mov	 esi, esp
  00062	8b ca		 mov	 ecx, edx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv324[ebp], eax
  00077	89 95 c4 fe ff
	ff		 mov	 DWORD PTR tv324[ebp+4], edx
  0007d	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR tv324[ebp+4], 0
  00084	7c 2c		 jl	 SHORT $LN10@Insert_str
  00086	7f 09		 jg	 SHORT $LN25@Insert_str
  00088	83 bd c0 fe ff
	ff 00		 cmp	 DWORD PTR tv324[ebp], 0
  0008f	76 21		 jbe	 SHORT $LN10@Insert_str
$LN25@Insert_str:
  00091	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00099	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0009c	8b f4		 mov	 esi, esp
  0009e	8b ca		 mov	 ecx, edx
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000a6	3b f4		 cmp	 esi, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	3b 45 10	 cmp	 eax, DWORD PTR __Size$[ebp]
  000b0	77 09		 ja	 SHORT $LN8@Insert_str
$LN10@Insert_str:

; 513  :         _Pad = 0;

  000b2	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Pad$[ebp], 0

; 514  :     } else {

  000b9	eb 22		 jmp	 SHORT $LN9@Insert_str
$LN8@Insert_str:

; 515  :         _Pad = static_cast<_SizeT>(_Ostr.width()) - _Size;

  000bb	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000be	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000c3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000c6	8b f4		 mov	 esi, esp
  000c8	8b ca		 mov	 ecx, edx
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000d0	3b f4		 cmp	 esi, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d7	2b 45 10	 sub	 eax, DWORD PTR __Size$[ebp]
  000da	89 45 d8	 mov	 DWORD PTR __Pad$[ebp], eax
$LN9@Insert_str:

; 516  :     }
; 517  : 
; 518  :     const typename _Ostr_t::sentry _Ok(_Ostr);

  000dd	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000e0	50		 push	 eax
  000e1	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e4	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000e9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 519  : 
; 520  :     if (!_Ok) {

  000f0	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000f3	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  000f8	0f b6 c0	 movzx	 eax, al
  000fb	85 c0		 test	 eax, eax
  000fd	75 0e		 jne	 SHORT $LN11@Insert_str

; 521  :         _State |= _Ostr_t::badbit;

  000ff	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00102	83 c8 04	 or	 eax, 4
  00105	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 522  :     } else { // state okay, insert characters

  00108	e9 a5 02 00 00	 jmp	 $LN12@Insert_str
$LN11@Insert_str:

; 523  :         _TRY_IO_BEGIN

  0010d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 524  :         if ((_Ostr.flags() & _Ostr_t::adjustfield) != _Ostr_t::left) {

  00111	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00114	8b 08		 mov	 ecx, DWORD PTR [eax]
  00116	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00119	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0011c	8b f4		 mov	 esi, esp
  0011e	8b ca		 mov	 ecx, edx
  00120	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00126	3b f4		 cmp	 esi, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012d	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  00133	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR tv135[ebp]
  00139	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0013e	83 f8 40	 cmp	 eax, 64			; 00000040H
  00141	0f 84 c0 00 00
	00		 je	 $LN14@Insert_str

; 525  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00147	eb 09		 jmp	 SHORT $LN4@Insert_str
$LN2@Insert_str:
  00149	8b 45 d8	 mov	 eax, DWORD PTR __Pad$[ebp]
  0014c	83 e8 01	 sub	 eax, 1
  0014f	89 45 d8	 mov	 DWORD PTR __Pad$[ebp], eax
$LN4@Insert_str:
  00152	83 7d d8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00156	0f 86 ab 00 00
	00		 jbe	 $LN14@Insert_str

; 526  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0015c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0015f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00161	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00164	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00167	8b f4		 mov	 esi, esp
  00169	8b ca		 mov	 ecx, edx
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00171	3b f4		 cmp	 esi, esp
  00173	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00178	88 85 c7 fe ff
	ff		 mov	 BYTE PTR tv283[ebp], al
  0017e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00181	8b 08		 mov	 ecx, DWORD PTR [eax]
  00183	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00186	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00189	8b f4		 mov	 esi, esp
  0018b	8b ca		 mov	 ecx, edx
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00193	3b f4		 cmp	 esi, esp
  00195	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019a	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  001a0	8b f4		 mov	 esi, esp
  001a2	0f b6 85 c7 fe
	ff ff		 movzx	 eax, BYTE PTR tv283[ebp]
  001a9	50		 push	 eax
  001aa	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp]
  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  001b6	3b f4		 cmp	 esi, esp
  001b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001bd	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  001c3	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  001c9	89 8d fc fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  001cf	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001d4	89 85 f0 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  001da	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  001e0	52		 push	 edx
  001e1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001ed	83 c4 08	 add	 esp, 8
  001f0	0f b6 c8	 movzx	 ecx, al
  001f3	85 c9		 test	 ecx, ecx
  001f5	74 0b		 je	 SHORT $LN15@Insert_str

; 527  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  001f7	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  001fa	83 c8 04	 or	 eax, 4
  001fd	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 528  :                     break;

  00200	eb 05		 jmp	 SHORT $LN14@Insert_str
$LN15@Insert_str:

; 529  :                 }
; 530  :             }

  00202	e9 42 ff ff ff	 jmp	 $LN2@Insert_str
$LN14@Insert_str:

; 531  :         }
; 532  : 
; 533  :         if (_State == _Ostr_t::goodbit
; 534  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  00207	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  0020b	0f 85 89 00 00
	00		 jne	 $LN16@Insert_str
  00211	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00214	8b 08		 mov	 ecx, DWORD PTR [eax]
  00216	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00219	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0021c	8b f4		 mov	 esi, esp
  0021e	8b ca		 mov	 ecx, edx
  00220	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00226	3b f4		 cmp	 esi, esp
  00228	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0022d	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  00233	8b 45 10	 mov	 eax, DWORD PTR __Size$[ebp]
  00236	33 c9		 xor	 ecx, ecx
  00238	8b f4		 mov	 esi, esp
  0023a	51		 push	 ecx
  0023b	50		 push	 eax
  0023c	8b 55 0c	 mov	 edx, DWORD PTR __Data$[ebp]
  0023f	52		 push	 edx
  00240	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  0024c	3b f4		 cmp	 esi, esp
  0024e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00253	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  00259	89 95 c0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp+4], edx
  0025f	8b 45 10	 mov	 eax, DWORD PTR __Size$[ebp]
  00262	33 c9		 xor	 ecx, ecx
  00264	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv405[ebp], eax
  0026a	89 8d b8 fe ff
	ff		 mov	 DWORD PTR tv405[ebp+4], ecx
  00270	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR tv287[ebp]
  00276	3b 95 b4 fe ff
	ff		 cmp	 edx, DWORD PTR tv405[ebp]
  0027c	75 0e		 jne	 SHORT $LN26@Insert_str
  0027e	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR tv287[ebp+4]
  00284	3b 85 b8 fe ff
	ff		 cmp	 eax, DWORD PTR tv405[ebp+4]
  0028a	74 0e		 je	 SHORT $LN16@Insert_str
$LN26@Insert_str:

; 535  :             _State |= _Ostr_t::badbit;

  0028c	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0028f	83 c8 04	 or	 eax, 4
  00292	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 536  :         } else {

  00295	e9 c0 00 00 00	 jmp	 $LN17@Insert_str
$LN16@Insert_str:

; 537  :             for (; 0 < _Pad; --_Pad) { // pad on right

  0029a	eb 09		 jmp	 SHORT $LN7@Insert_str
$LN5@Insert_str:
  0029c	8b 45 d8	 mov	 eax, DWORD PTR __Pad$[ebp]
  0029f	83 e8 01	 sub	 eax, 1
  002a2	89 45 d8	 mov	 DWORD PTR __Pad$[ebp], eax
$LN7@Insert_str:
  002a5	83 7d d8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  002a9	0f 86 ab 00 00
	00		 jbe	 $LN17@Insert_str

; 538  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002af	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b4	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002b7	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002ba	8b f4		 mov	 esi, esp
  002bc	8b ca		 mov	 ecx, edx
  002be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002c4	3b f4		 cmp	 esi, esp
  002c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002cb	88 85 c7 fe ff
	ff		 mov	 BYTE PTR tv288[ebp], al
  002d1	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d6	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002d9	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002dc	8b f4		 mov	 esi, esp
  002de	8b ca		 mov	 ecx, edx
  002e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002e6	3b f4		 cmp	 esi, esp
  002e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ed	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv289[ebp], eax
  002f3	8b f4		 mov	 esi, esp
  002f5	0f b6 85 c7 fe
	ff ff		 movzx	 eax, BYTE PTR tv288[ebp]
  002fc	50		 push	 eax
  002fd	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv289[ebp]
  00303	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00309	3b f4		 cmp	 esi, esp
  0030b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00310	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  00316	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0031c	89 8d e4 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00322	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00327	89 85 d8 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0032d	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00333	52		 push	 edx
  00334	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0033a	50		 push	 eax
  0033b	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00340	83 c4 08	 add	 esp, 8
  00343	0f b6 c8	 movzx	 ecx, al
  00346	85 c9		 test	 ecx, ecx
  00348	74 0b		 je	 SHORT $LN18@Insert_str

; 539  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  0034a	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0034d	83 c8 04	 or	 eax, 4
  00350	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 540  :                     break;

  00353	eb 05		 jmp	 SHORT $LN17@Insert_str
$LN18@Insert_str:

; 541  :                 }
; 542  :             }

  00355	e9 42 ff ff ff	 jmp	 $LN5@Insert_str
$LN17@Insert_str:

; 543  :         }
; 544  : 
; 545  :         _Ostr.width(0);

  0035a	8b f4		 mov	 esi, esp
  0035c	6a 00		 push	 0
  0035e	6a 00		 push	 0
  00360	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00363	8b 08		 mov	 ecx, DWORD PTR [eax]
  00365	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00368	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0036b	8b ca		 mov	 ecx, edx
  0036d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  00373	3b f4		 cmp	 esi, esp
  00375	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0037a	eb 26		 jmp	 SHORT $LN20@Insert_str
__catch$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$0:

; 546  :         _CATCH_IO_(_Ostr_t, _Ostr)

  0037c	8b f4		 mov	 esi, esp
  0037e	6a 01		 push	 1
  00380	6a 04		 push	 4
  00382	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00385	8b 08		 mov	 ecx, DWORD PTR [eax]
  00387	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0038a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0038d	8b ca		 mov	 ecx, edx
  0038f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00395	3b f4		 cmp	 esi, esp
  00397	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0039c	b8 00 00 00 00	 mov	 eax, $LN24@Insert_str
  003a1	c3		 ret	 0
$LN20@Insert_str:
  003a2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  003a9	eb 07		 jmp	 SHORT $LN12@Insert_str
$LN24@Insert_str:
  003ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN12@Insert_str:

; 547  :     }
; 548  : 
; 549  :     _Ostr.setstate(_State);

  003b2	8b f4		 mov	 esi, esp
  003b4	6a 00		 push	 0
  003b6	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003b9	50		 push	 eax
  003ba	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003bd	8b 11		 mov	 edx, DWORD PTR [ecx]
  003bf	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003c2	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003cb	3b f4		 cmp	 esi, esp
  003cd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 550  :     return _Ostr;

  003d2	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003d5	89 85 cc fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  003e2	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  003e5	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003ea	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 551  : }

  003f0	52		 push	 edx
  003f1	8b cd		 mov	 ecx, ebp
  003f3	50		 push	 eax
  003f4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN30@Insert_str
  003fa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003ff	58		 pop	 eax
  00400	5a		 pop	 edx
  00401	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00404	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0040b	59		 pop	 ecx
  0040c	5f		 pop	 edi
  0040d	5e		 pop	 esi
  0040e	5b		 pop	 ebx
  0040f	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00412	33 cd		 xor	 ecx, ebp
  00414	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00419	81 c4 4c 01 00
	00		 add	 esp, 332		; 0000014cH
  0041f	3b ec		 cmp	 ebp, esp
  00421	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00426	8b e5		 mov	 esp, ebp
  00428	5d		 pop	 ebp
  00429	c3		 ret	 0
  0042a	66 90		 npad	 2
$LN30@Insert_str:
  0042c	01 00 00 00	 DD	 1
  00430	00 00 00 00	 DD	 $LN29@Insert_str
$LN29@Insert_str:
  00434	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00438	08 00 00 00	 DD	 8
  0043c	00 00 00 00	 DD	 $LN27@Insert_str
$LN27@Insert_str:
  00440	5f		 DB	 95			; 0000005fH
  00441	4f		 DB	 79			; 0000004fH
  00442	6b		 DB	 107			; 0000006bH
  00443	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a b0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-336]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ENDP ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0001d	33 c9		 xor	 ecx, ecx
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  0003c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00041	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00048	72 10		 jb	 SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0004a	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0004d	50		 push	 eax
  0004e	8d 4d 08	 lea	 ecx, DWORD PTR __Ptr$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00057	83 c4 08	 add	 esp, 8
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

  0005a	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00067	83 c4 08	 add	 esp, 8

; 256  :     }
; 257  : }

  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
  00089	cc		 int	 3
  0008a	cc		 int	 3
  0008b	cc		 int	 3
  0008c	cc		 int	 3
  0008d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$max@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
$T1 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@I@std@@YAABIABI0@Z PROC				; std::max<unsigned int>, COMDAT

; 41   :     (max) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  0000f	b9 04 00 00 00	 mov	 ecx, 4
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __A95B55BB_utility
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 42   :     // return larger of _Left and _Right
; 43   :     return _Left < _Right ? _Right : _Left;

  00025	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002b	8b 10		 mov	 edx, DWORD PTR [eax]
  0002d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002f	73 0b		 jae	 SHORT $LN3@max
  00031	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00034	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  0003a	eb 09		 jmp	 SHORT $LN4@max
$LN3@max:
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0003f	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
$LN4@max:
  00045	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  0004b	89 95 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  00051	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]

; 44   : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
??$max@I@std@@YAABIABI0@Z ENDP				; std::max<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 293  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __5E44C2A9_xstddef
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 294  :     return _Ptr;

  00021	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 294  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
$T2 = -313						; size = 1
__New_ptr$ = -112					; size = 4
__New_capacity$ = -100					; size = 4
__Proxy$ = -88						; size = 8
_$S8$ = -69						; size = 1
__Alproxy$ = -60					; size = 4
__Al$ = -48						; size = 4
__My_data$ = -36					; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 2728 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  0001e	b9 1d 00 00 00	 mov	 ecx, 29			; 0000001dH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2729 :         auto& _My_data = _Mypair._Myval2;

  0004c	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	89 45 dc	 mov	 DWORD PTR __My_data$[ebp], eax

; 2730 :         _STL_INTERNAL_CHECK(!_My_data._Large_string_engaged());
; 2731 :         _STL_INTERNAL_CHECK(_STD count(_My_data._Bx._Buf, _My_data._Bx._Buf + _BUF_SIZE, _Elem()) == _BUF_SIZE);
; 2732 : 
; 2733 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2734 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2735 :         } else {
; 2736 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2737 :         }
; 2738 : 
; 2739 :         if (_Count > max_size()) {

  00052	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0005a	39 45 0c	 cmp	 DWORD PTR __Count$[ebp], eax
  0005d	76 05		 jbe	 SHORT $LN2@Construct

; 2740 :             _Xlen_string(); // result too long

  0005f	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Construct:

; 2741 :         }
; 2742 : 
; 2743 :         auto& _Al       = _Getal();

  00064	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0006c	89 45 d0	 mov	 DWORD PTR __Al$[ebp], eax

; 2744 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

  0006f	8b 45 d0	 mov	 eax, DWORD PTR __Al$[ebp]
  00072	50		 push	 eax
  00073	8d 4d bb	 lea	 ecx, DWORD PTR _$S8$[ebp]
  00076	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0007b	8d 4d bb	 lea	 ecx, DWORD PTR _$S8$[ebp]
  0007e	89 4d c4	 mov	 DWORD PTR __Alproxy$[ebp], ecx

; 2745 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

  00081	8b 45 dc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00084	50		 push	 eax
  00085	8b 4d c4	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  00088	51		 push	 ecx
  00089	8d 4d a8	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0008c	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00091	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2746 : 
; 2747 :         if (_Count < _BUF_SIZE) {

  00098	83 7d 0c 10	 cmp	 DWORD PTR __Count$[ebp], 16 ; 00000010H
  0009c	73 46		 jae	 SHORT $LN3@Construct

; 2748 :             _My_data._Mysize = _Count;

  0009e	8b 45 dc	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  000a4	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2749 :             _My_data._Myres  = _BUF_SIZE - 1;

  000a7	8b 45 dc	 mov	 eax, DWORD PTR __My_data$[ebp]
  000aa	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 2750 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2751 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2752 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2753 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _Count);

  000b1	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  000b4	50		 push	 eax
  000b5	8b 4d 08	 mov	 ecx, DWORD PTR __Arg$[ebp]
  000b8	51		 push	 ecx
  000b9	8b 55 dc	 mov	 edx, DWORD PTR __My_data$[ebp]
  000bc	83 c2 04	 add	 edx, 4
  000bf	52		 push	 edx
  000c0	e8 00 00 00 00	 call	 ?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::move
  000c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2754 :             } else { // _Strat == _Construct_strategy::_From_string
; 2755 : #ifdef _INSERT_STRING_ANNOTATION
; 2756 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _Count);
; 2757 : #else // ^^^ _INSERT_STRING_ANNOTATION ^^^ // vvv !_INSERT_STRING_ANNOTATION vvv
; 2758 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _BUF_SIZE);
; 2759 : #endif // !_INSERT_STRING_ANNOTATION
; 2760 :             }
; 2761 : 
; 2762 :             _ASAN_STRING_CREATE(*this);
; 2763 :             _Proxy._Release();

  000c8	8d 4d a8	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000cb	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2764 :             return;

  000d0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d7	8d 4d a8	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000da	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000df	e9 aa 00 00 00	 jmp	 $LN4@Construct
$LN3@Construct:

; 2765 :         }
; 2766 : 
; 2767 :         _My_data._Myres               = _BUF_SIZE - 1;

  000e4	8b 45 dc	 mov	 eax, DWORD PTR __My_data$[ebp]
  000e7	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 2768 :         const size_type _New_capacity = _Calculate_growth(_Count);

  000ee	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  000f1	50		 push	 eax
  000f2	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  000fa	89 45 9c	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 2769 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000fd	8b 45 9c	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  00100	83 c0 01	 add	 eax, 1
  00103	50		 push	 eax
  00104	8b 4d d0	 mov	 ecx, DWORD PTR __Al$[ebp]
  00107	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0010c	89 45 90	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 2770 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0010f	8d 45 90	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  00112	50		 push	 eax
  00113	8b 4d dc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00116	83 c1 04	 add	 ecx, 4
  00119	51		 push	 ecx
  0011a	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  0011f	83 c4 08	 add	 esp, 8

; 2771 : 
; 2772 : #if _HAS_CXX20
; 2773 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2774 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 2775 :         }
; 2776 : #endif // _HAS_CXX20
; 2777 : 
; 2778 :         _My_data._Mysize = _Count;

  00122	8b 45 dc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00125	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00128	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2779 :         _My_data._Myres  = _New_capacity;

  0012b	8b 45 dc	 mov	 eax, DWORD PTR __My_data$[ebp]
  0012e	8b 4d 9c	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00131	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2780 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2781 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2782 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2783 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2784 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);

  00134	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00137	50		 push	 eax
  00138	8b 4d 08	 mov	 ecx, DWORD PTR __Arg$[ebp]
  0013b	51		 push	 ecx
  0013c	8b 55 90	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0013f	52		 push	 edx
  00140	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00145	83 c4 04	 add	 esp, 4
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
  0014e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2785 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00151	c6 85 c7 fe ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  00158	8d 85 c7 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0015e	50		 push	 eax
  0015f	8b 4d 90	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00162	51		 push	 ecx
  00163	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00168	83 c4 04	 add	 esp, 4
  0016b	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00174	83 c4 08	 add	 esp, 8

; 2786 :         } else { // _Strat == _Construct_strategy::_From_string
; 2787 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2788 :         }
; 2789 : 
; 2790 :         _ASAN_STRING_CREATE(*this);
; 2791 :         _Proxy._Release();

  00177	8d 4d a8	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0017a	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2792 :     }

  0017f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00186	8d 4d a8	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00189	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
$LN4@Construct:
  0018e	52		 push	 edx
  0018f	8b cd		 mov	 ecx, ebp
  00191	50		 push	 eax
  00192	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Construct
  00198	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0019d	58		 pop	 eax
  0019e	5a		 pop	 edx
  0019f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a9	59		 pop	 ecx
  001aa	5f		 pop	 edi
  001ab	5e		 pop	 esi
  001ac	5b		 pop	 ebx
  001ad	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b0	33 cd		 xor	 ecx, ebp
  001b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b7	81 c4 40 01 00
	00		 add	 esp, 320		; 00000140H
  001bd	3b ec		 cmp	 ebp, esp
  001bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c2 08 00	 ret	 8
  001ca	66 90		 npad	 2
$LN11@Construct:
  001cc	03 00 00 00	 DD	 3
  001d0	00 00 00 00	 DD	 $LN10@Construct
$LN10@Construct:
  001d4	bb ff ff ff	 DD	 -69			; ffffffbbH
  001d8	01 00 00 00	 DD	 1
  001dc	00 00 00 00	 DD	 $LN6@Construct
  001e0	a8 ff ff ff	 DD	 -88			; ffffffa8H
  001e4	08 00 00 00	 DD	 8
  001e8	00 00 00 00	 DD	 $LN7@Construct
  001ec	90 ff ff ff	 DD	 -112			; ffffff90H
  001f0	04 00 00 00	 DD	 4
  001f4	00 00 00 00	 DD	 $LN8@Construct
$LN8@Construct:
  001f8	5f		 DB	 95			; 0000005fH
  001f9	4e		 DB	 78			; 0000004eH
  001fa	65		 DB	 101			; 00000065H
  001fb	77		 DB	 119			; 00000077H
  001fc	5f		 DB	 95			; 0000005fH
  001fd	70		 DB	 112			; 00000070H
  001fe	74		 DB	 116			; 00000074H
  001ff	72		 DB	 114			; 00000072H
  00200	00		 DB	 0
$LN7@Construct:
  00201	5f		 DB	 95			; 0000005fH
  00202	50		 DB	 80			; 00000050H
  00203	72		 DB	 114			; 00000072H
  00204	6f		 DB	 111			; 0000006fH
  00205	78		 DB	 120			; 00000078H
  00206	79		 DB	 121			; 00000079H
  00207	00		 DB	 0
$LN6@Construct:
  00208	24		 DB	 36			; 00000024H
  00209	53		 DB	 83			; 00000053H
  0020a	38		 DB	 56			; 00000038H
  0020b	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a bc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-324]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 1376 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00046	3b ec		 cmp	 ebp, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Convert_size@II@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@II@std@@YAII@Z PROC			; std::_Convert_size<unsigned int,unsigned int>, COMDAT

; 965  :     sizeof(_Unsigned_type) <= sizeof(_Size_type)) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 966  :     // convert _Unsigned_type to _Size_type, avoiding truncation
; 967  :     _STL_INTERNAL_STATIC_ASSERT(_Unsigned_type(-1) > 0);
; 968  :     _STL_INTERNAL_STATIC_ASSERT(_Size_type(-1) > 0);
; 969  : 
; 970  :     if constexpr (sizeof(_Unsigned_type) > sizeof(_Size_type)) {
; 971  :         if (_Len > (numeric_limits<_Size_type>::max)()) {
; 972  :             _Xlength_error("size is too long for _Size_type");
; 973  :         }
; 974  :     }
; 975  : 
; 976  :     return static_cast<_Size_type>(_Len);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Len$[ebp]

; 977  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$_Convert_size@II@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 992  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 993  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 994  :     using _Ty = typename _Alloc::value_type;
; 995  :     _Ptr->~_Ty();
; 996  :     _Deallocate_plain(_Al, _Ptr);

  00021	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
  0002e	83 c4 08	 add	 esp, 8

; 997  : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 833  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$07@std@@YAII@Z ; std::_Get_size_of_n<8>
  00033	83 c4 04	 add	 esp, 4
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0003c	83 c4 04	 add	 esp, 4

; 836  :     }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
$T1 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  0000f	b9 04 00 00 00	 mov	 ecx, 4
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __A95B55BB_utility
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

  00025	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0002b	8b 10		 mov	 edx, DWORD PTR [eax]
  0002d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002f	73 0b		 jae	 SHORT $LN3@min
  00031	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00034	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  0003a	eb 09		 jmp	 SHORT $LN4@min
$LN3@min:
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0003f	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
$LN4@min:
  00045	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  0004b	89 95 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  00051	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]

; 67   : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 1005 :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __7B331E11_ostream
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1006 :     _Ostr.put(_Ostr.widen('\n'));

  00021	8b f4		 mov	 esi, esp
  00023	6a 0a		 push	 10			; 0000000aH
  00025	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0002d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00030	8b ca		 mov	 ecx, edx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b f4		 mov	 esi, esp
  00041	0f b6 c0	 movzx	 eax, al
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1007 :     _Ostr.flush();

  00055	8b f4		 mov	 esi, esp
  00057	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1008 :     return _Ostr;

  00067	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 1009 : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5361 :     basic_ostream<_Elem, _Traits>& _Ostr, const basic_string<_Elem, _Traits, _Alloc>& _Str) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 5362 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00024	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00029	50		 push	 eax
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0002d	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  00032	50		 push	 eax
  00033	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5363 : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\User\Desktop\Everythin' for BSTU\Narkevich\All laboratory works\2-ой семестр\решения лбр\LBR_03\LBR_01\monthName.cpp
;	COMDAT ?monthName@@YAXH@Z
_TEXT	SEGMENT
_names$ = -356						; size = 336
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_month$ = 8						; size = 4
?monthName@@YAXH@Z PROC					; monthName, COMDAT

; 3    : void monthName(int month) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?monthName@@YAXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 02 00
	00		 sub	 esp, 540		; 0000021cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 98 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-360]
  00020	b9 57 00 00 00	 mov	 ecx, 87			; 00000057H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET __0393C2D9_monthName@cpp
  00045	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4    : 	setlocale(LC_CTYPE, "");

  0004a	8b f4		 mov	 esi, esp
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00051	6a 02		 push	 2
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale
  00059	83 c4 08	 add	 esp, 8
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 5    : 	string names[12] = { "января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря" };

  00063	68 00 00 00 00	 push	 OFFSET ??_C@_06PIPEDJMI@?$PP?m?b?$OA?p?$PP@
  00068	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp]
  0006e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_07EDDANKEJ@?t?e?b?p?$OA?k?$PP@
  0007f	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+28]
  00085	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0008a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_05GJDHAAIP@?l?$OA?p?r?$OA@
  00093	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+56]
  00099	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0009e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_06BJCHAMKF@?$OA?o?p?e?k?$PP@
  000a7	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+84]
  000ad	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b2	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_03HINEPDLB@?l?$OA?$PP@
  000bb	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+112]
  000c1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c6	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_04HFNOFLOJ@?h?$PO?m?$PP@
  000cf	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+140]
  000d5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000da	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_04HBFDCHFL@?h?$PO?k?$PP@
  000e3	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+168]
  000e9	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ee	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_07MEJCNEPI@?$OA?b?c?s?q?r?$OA@
  000f7	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+196]
  000fd	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00102	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_08OLCBAHDL@?q?e?m?r?$PP?a?p?$PP@
  0010b	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+224]
  00111	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00116	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_07HBEKDJPN@?n?j?r?$PP?a?p?$PP@
  0011f	8d 4d 98	 lea	 ecx, DWORD PTR _names$[ebp+252]
  00122	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00127	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_06KOONPCNH@?m?n?$PP?a?p?$PP@
  00130	8d 4d b4	 lea	 ecx, DWORD PTR _names$[ebp+280]
  00133	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00138	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_07BLPHNFHJ@?d?e?j?$OA?a?p?$PP@
  00141	8d 4d d0	 lea	 ecx, DWORD PTR _names$[ebp+308]
  00144	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00149	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 11 ; 0000000bH

; 6    : 	cout << names[month - 1] << endl << endl;

  00150	8b f4		 mov	 esi, esp
  00152	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00157	8b fc		 mov	 edi, esp
  00159	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0015e	8b 45 08	 mov	 eax, DWORD PTR _month$[ebp]
  00161	83 e8 01	 sub	 eax, 1
  00164	6b c8 1c	 imul	 ecx, eax, 28
  00167	8d 94 0d 9c fe
	ff ff		 lea	 edx, DWORD PTR _names$[ebp+ecx]
  0016e	52		 push	 edx
  0016f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00174	50		 push	 eax
  00175	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0017a	83 c4 08	 add	 esp, 8
  0017d	8b c8		 mov	 ecx, eax
  0017f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00185	3b fc		 cmp	 edi, esp
  00187	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018c	8b c8		 mov	 ecx, eax
  0018e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00194	3b f4		 cmp	 esi, esp
  00196	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 7    : 
; 8    : }

  0019b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001a2	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001a7	6a 0c		 push	 12			; 0000000cH
  001a9	6a 1c		 push	 28			; 0000001cH
  001ab	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _names$[ebp]
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  001b7	52		 push	 edx
  001b8	8b cd		 mov	 ecx, ebp
  001ba	50		 push	 eax
  001bb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN19@monthName
  001c1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001c6	58		 pop	 eax
  001c7	5a		 pop	 edx
  001c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d2	59		 pop	 ecx
  001d3	5f		 pop	 edi
  001d4	5e		 pop	 esi
  001d5	5b		 pop	 ebx
  001d6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d9	33 cd		 xor	 ecx, ebp
  001db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e0	81 c4 28 02 00
	00		 add	 esp, 552		; 00000228H
  001e6	3b ec		 cmp	 ebp, esp
  001e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ed	8b e5		 mov	 esp, ebp
  001ef	5d		 pop	 ebp
  001f0	c3		 ret	 0
  001f1	0f 1f 00	 npad	 3
$LN19@monthName:
  001f4	01 00 00 00	 DD	 1
  001f8	00 00 00 00	 DD	 $LN18@monthName
$LN18@monthName:
  001fc	9c fe ff ff	 DD	 -356			; fffffe9cH
  00200	50 01 00 00	 DD	 336			; 00000150H
  00204	00 00 00 00	 DD	 $LN16@monthName
$LN16@monthName:
  00208	6e		 DB	 110			; 0000006eH
  00209	61		 DB	 97			; 00000061H
  0020a	6d		 DB	 109			; 0000006dH
  0020b	65		 DB	 101			; 00000065H
  0020c	73		 DB	 115			; 00000073H
  0020d	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?monthName@@YAXH@Z$0:
  00000	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?monthName@@YAXH@Z$1:
  0000b	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+28]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?monthName@@YAXH@Z$2:
  00016	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+56]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?monthName@@YAXH@Z$3:
  00021	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+84]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?monthName@@YAXH@Z$4:
  0002c	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+112]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?monthName@@YAXH@Z$5:
  00037	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+140]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?monthName@@YAXH@Z$6:
  00042	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+168]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?monthName@@YAXH@Z$7:
  0004d	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+196]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?monthName@@YAXH@Z$8:
  00058	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _names$[ebp+224]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?monthName@@YAXH@Z$9:
  00063	8d 4d 98	 lea	 ecx, DWORD PTR _names$[ebp+252]
  00066	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?monthName@@YAXH@Z$10:
  0006b	8d 4d b4	 lea	 ecx, DWORD PTR _names$[ebp+280]
  0006e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?monthName@@YAXH@Z$12:
  00073	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00078	6a 0c		 push	 12			; 0000000cH
  0007a	6a 1c		 push	 28			; 0000001cH
  0007c	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _names$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00088	c3		 ret	 0
  00089	cc		 int	 3
  0008a	cc		 int	 3
  0008b	cc		 int	 3
  0008c	cc		 int	 3
  0008d	cc		 int	 3
__ehhandler$?monthName@@YAXH@Z:
  0008e	90		 npad	 1
  0008f	90		 npad	 1
  00090	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00094	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00097	8b 8a d4 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-556]
  0009d	33 c8		 xor	 ecx, eax
  0009f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a4	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000a7	33 c8		 xor	 ecx, eax
  000a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ae	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?monthName@@YAXH@Z
  000b3	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?monthName@@YAXH@Z ENDP					; monthName
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1387 :     constexpr const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1388 :         return *this;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 1389 :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1383 :     constexpr _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1384 :         return *this;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 1385 :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 5036 :     _CONSTEXPR20 const _Alty& _Getal() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 5037 :         return _Mypair._Get_first();

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 5038 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 5032 :     _CONSTEXPR20 _Alty& _Getal() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 5033 :         return _Mypair._Get_first();

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 5034 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T2 = -257						; size = 1
__Al$3 = -56						; size = 4
__Ptr$4 = -44						; size = 4
__My_data$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 5004 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  0001e	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 5005 :         auto& _My_data = _Mypair._Myval2;

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	89 45 e0	 mov	 DWORD PTR __My_data$[ebp], eax

; 5006 :         _My_data._Orphan_all();

  0004f	8b 4d e0	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00052	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 5007 :         _ASAN_STRING_REMOVE(*this);
; 5008 :         if (_My_data._Large_string_engaged()) {

  00057	8b 4d e0	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0005f	0f b6 c0	 movzx	 eax, al
  00062	85 c0		 test	 eax, eax
  00064	74 41		 je	 SHORT $LN2@Tidy_deall

; 5009 :             const pointer _Ptr = _My_data._Bx._Ptr;

  00066	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  00069	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006c	89 4d d4	 mov	 DWORD PTR __Ptr$4[ebp], ecx

; 5010 :             auto& _Al          = _Getal();

  0006f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00077	89 45 c8	 mov	 DWORD PTR __Al$3[ebp], eax

; 5011 :             _Destroy_in_place(_My_data._Bx._Ptr);

  0007a	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  0007d	83 c0 04	 add	 eax, 4
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
  00086	83 c4 04	 add	 esp, 4

; 5012 :             _My_data._Activate_SSO_buffer();

  00089	8b 4d e0	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0008c	e8 00 00 00 00	 call	 ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer

; 5013 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00091	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  00094	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00097	83 c1 01	 add	 ecx, 1
  0009a	51		 push	 ecx
  0009b	8b 55 d4	 mov	 edx, DWORD PTR __Ptr$4[ebp]
  0009e	52		 push	 edx
  0009f	8b 4d c8	 mov	 ecx, DWORD PTR __Al$3[ebp]
  000a2	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 5014 :         }
; 5015 : 
; 5016 :         _My_data._Mysize = 0;

  000a7	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  000aa	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 5017 :         _My_data._Myres  = _BUF_SIZE - 1;

  000b1	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  000b4	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 5018 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5019 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000bb	c6 85 ff fe ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  000c2	8d 85 ff fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000c8	50		 push	 eax
  000c9	b9 01 00 00 00	 mov	 ecx, 1
  000ce	6b d1 00	 imul	 edx, ecx, 0
  000d1	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  000d4	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  000d8	51		 push	 ecx
  000d9	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  000de	83 c4 08	 add	 esp, 8

; 5020 :     }

  000e1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000eb	59		 pop	 ecx
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  000f5	3b ec		 cmp	 ebp, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
  00100	cc		 int	 3
  00101	cc		 int	 3
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a f4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-268]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4892 :     _NODISCARD _CONSTEXPR20 size_type _Calculate_growth(const size_type _Requested) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4893 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00032	50		 push	 eax
  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00039	51		 push	 ecx
  0003a	8b 55 08	 mov	 edx, DWORD PTR __Requested$[ebp]
  0003d	52		 push	 edx
  0003e	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4894 :     }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z
_TEXT	SEGMENT
$T1 = -216						; size = 4
__Masked$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Requested$ = 8					; size = 4
__Old$ = 12						; size = 4
__Max$ = 16						; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4879 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  0002a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4880 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0002f	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  00032	83 c8 0f	 or	 eax, 15			; 0000000fH
  00035	89 45 f4	 mov	 DWORD PTR __Masked$[ebp], eax

; 4881 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00038	8b 45 f4	 mov	 eax, DWORD PTR __Masked$[ebp]
  0003b	3b 45 10	 cmp	 eax, DWORD PTR __Max$[ebp]
  0003e	76 05		 jbe	 SHORT $LN2@Calculate_

; 4882 :             return _Max;

  00040	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  00043	eb 37		 jmp	 SHORT $LN4@Calculate_
$LN2@Calculate_:

; 4883 :         }
; 4884 : 
; 4885 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00045	8b 45 0c	 mov	 eax, DWORD PTR __Old$[ebp]
  00048	d1 e8		 shr	 eax, 1
  0004a	8b 4d 10	 mov	 ecx, DWORD PTR __Max$[ebp]
  0004d	2b c8		 sub	 ecx, eax
  0004f	39 4d 0c	 cmp	 DWORD PTR __Old$[ebp], ecx
  00052	76 05		 jbe	 SHORT $LN3@Calculate_

; 4886 :             return _Max;

  00054	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  00057	eb 23		 jmp	 SHORT $LN4@Calculate_
$LN3@Calculate_:

; 4887 :         }
; 4888 : 
; 4889 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00059	8b 45 0c	 mov	 eax, DWORD PTR __Old$[ebp]
  0005c	d1 e8		 shr	 eax, 1
  0005e	03 45 0c	 add	 eax, DWORD PTR __Old$[ebp]
  00061	89 85 28 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00067	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0006d	51		 push	 ecx
  0006e	8d 55 f4	 lea	 edx, DWORD PTR __Masked$[ebp]
  00071	52		 push	 edx
  00072	e8 00 00 00 00	 call	 ??$max@I@std@@YAABIABI0@Z ; std::max<unsigned int>
  00077	83 c4 08	 add	 esp, 8
  0007a	8b 00		 mov	 eax, DWORD PTR [eax]
$LN4@Calculate_:

; 4890 :     }

  0007c	52		 push	 edx
  0007d	8b cd		 mov	 ecx, ebp
  0007f	50		 push	 eax
  00080	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Calculate_
  00086	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0008b	58		 pop	 eax
  0008c	5a		 pop	 edx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00093	33 cd		 xor	 ecx, ebp
  00095	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009a	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000a0	3b ec		 cmp	 ebp, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
  000ab	90		 npad	 1
$LN7@Calculate_:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN6@Calculate_
$LN6@Calculate_:
  000b4	f4 ff ff ff	 DD	 -12			; fffffff4H
  000b8	04 00 00 00	 DD	 4
  000bc	00 00 00 00	 DD	 $LN5@Calculate_
$LN5@Calculate_:
  000c0	5f		 DB	 95			; 0000005fH
  000c1	4d		 DB	 77			; 0000004dH
  000c2	61		 DB	 97			; 00000061H
  000c3	73		 DB	 115			; 00000073H
  000c4	6b		 DB	 107			; 0000006bH
  000c5	65		 DB	 101			; 00000065H
  000c6	64		 DB	 100			; 00000064H
  000c7	00		 DB	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -264						; size = 4
$T2 = -252						; size = 4
$T3 = -240						; size = 4
__Storage_max$ = -36					; size = 4
__Alloc_max$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 4277 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d b4	 lea	 edi, DWORD PTR [ebp-76]
  00010	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00027	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  0002f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4278 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

  00034	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  00042	83 c4 04	 add	 esp, 4
  00045	89 45 e8	 mov	 DWORD PTR __Alloc_max$[ebp], eax

; 4279 :         const size_type _Storage_max = // can always store small string

  00048	c7 85 10 ff ff
	ff 10 00 00 00	 mov	 DWORD PTR $T3[ebp], 16	; 00000010H
  00052	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00058	50		 push	 eax
  00059	8d 4d e8	 lea	 ecx, DWORD PTR __Alloc_max$[ebp]
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 ??$max@I@std@@YAABIABI0@Z ; std::max<unsigned int>
  00062	83 c4 08	 add	 esp, 8
  00065	8b 10		 mov	 edx, DWORD PTR [eax]
  00067	89 55 dc	 mov	 DWORD PTR __Storage_max$[ebp], edx

; 4280 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 4281 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  0006a	8b 45 dc	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  0006d	83 e8 01	 sub	 eax, 1
  00070	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00076	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  0007b	89 85 f8 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00081	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00087	51		 push	 ecx
  00088	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  00094	83 c4 08	 add	 esp, 8
  00097	8b 00		 mov	 eax, DWORD PTR [eax]

; 4282 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 4283 :         );
; 4284 :     }

  00099	52		 push	 edx
  0009a	8b cd		 mov	 ecx, ebp
  0009c	50		 push	 eax
  0009d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@max_size
  000a3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a8	58		 pop	 eax
  000a9	5a		 pop	 edx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b0	33 cd		 xor	 ecx, ebp
  000b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b7	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000bd	3b ec		 cmp	 ebp, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
$LN5@max_size:
  000c8	01 00 00 00	 DD	 1
  000cc	00 00 00 00	 DD	 $LN4@max_size
$LN4@max_size:
  000d0	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000d4	04 00 00 00	 DD	 4
  000d8	00 00 00 00	 DD	 $LN3@max_size
$LN3@max_size:
  000dc	5f		 DB	 95			; 0000005fH
  000dd	41		 DB	 65			; 00000041H
  000de	6c		 DB	 108			; 0000006cH
  000df	6c		 DB	 108			; 0000006cH
  000e0	6f		 DB	 111			; 0000006fH
  000e1	63		 DB	 99			; 00000063H
  000e2	5f		 DB	 95			; 0000005fH
  000e3	6d		 DB	 109			; 0000006dH
  000e4	61		 DB	 97			; 00000061H
  000e5	78		 DB	 120			; 00000078H
  000e6	00		 DB	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 4273 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4274 :         return _Mypair._Myval2._Mysize;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 4275 :     }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT
; _this$ = ecx

; 4259 :     _NODISCARD _CONSTEXPR20 _Ret_z_ const _Elem* data() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4260 :         return _Mypair._Myval2._Myptr();

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 4261 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
__To_delete$ = -48					; size = 4
_$S4$ = -33						; size = 1
__Alproxy$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3267 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00010	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00027	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  0002f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3268 :         _Tidy_deallocate();

  00034	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 3269 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3270 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00044	50		 push	 eax
  00045	8d 4d df	 lea	 ecx, DWORD PTR _$S4$[ebp]
  00048	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0004d	8d 45 df	 lea	 eax, DWORD PTR _$S4$[ebp]
  00050	89 45 e8	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 3271 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

  00053	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	89 4d d0	 mov	 DWORD PTR __To_delete$[ebp], ecx

; 3272 :         _Mypair._Myval2._Myproxy = nullptr;

  0005b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 3273 :         _Delete_plain_internal(_Alproxy, _To_delete);

  00064	8b 45 d0	 mov	 eax, DWORD PTR __To_delete$[ebp]
  00067	50		 push	 eax
  00068	8b 4d e8	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00071	83 c4 08	 add	 esp, 8

; 3274 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3275 :     }

  00074	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  0007c	52		 push	 edx
  0007d	8b cd		 mov	 ecx, ebp
  0007f	50		 push	 eax
  00080	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@basic_stri
  00086	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0008b	58		 pop	 eax
  0008c	5a		 pop	 edx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00093	33 cd		 xor	 ecx, ebp
  00095	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009a	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000a0	3b ec		 cmp	 ebp, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
  000ab	90		 npad	 1
$LN5@basic_stri:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN4@basic_stri
$LN4@basic_stri:
  000b4	df ff ff ff	 DD	 -33			; ffffffdfH
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@basic_stri
$LN3@basic_stri:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	34		 DB	 52			; 00000034H
  000c3	00		 DB	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2673 :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0001e	b9 06 00 00 00	 mov	 ecx, 6
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00049	0f b6 85 23 ff
	ff ff		 movzx	 eax, BYTE PTR $T2[ebp]
  00050	50		 push	 eax
  00051	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2674 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00060	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  00069	83 c4 04	 add	 esp, 4
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??$_Convert_size@II@std@@YAII@Z ; std::_Convert_size<unsigned int,unsigned int>
  00072	83 c4 04	 add	 esp, 4
  00075	50		 push	 eax
  00076	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00079	51		 push	 ecx
  0007a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 2675 :     }

  00082	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00089	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000a0	3b ec		 cmp	 ebp, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	83 c1 04	 add	 ecx, 4
  00026	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 2341 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 2339 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	33 c0		 xor	 eax, eax
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	89 01		 mov	 DWORD PTR [ecx], eax
  00031	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00034	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00037	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00046	3b ec		 cmp	 ebp, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer, COMDAT
; _this$ = ecx

; 2304 :     constexpr void _Activate_SSO_buffer() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2305 :         // begin the lifetime of the array elements (e.g., before copying into them)
; 2306 : #if _HAS_CXX20
; 2307 :         if (_STD is_constant_evaluated()) {
; 2308 :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2309 :                 _Bx._Buf[_Idx] = value_type();
; 2310 :             }
; 2311 :         }
; 2312 : #endif // _HAS_CXX20
; 2313 :     }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 2300 :     _CONSTEXPR20 bool _Large_string_engaged() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  00010	b9 04 00 00 00	 mov	 ecx, 4
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2301 :         return _BUF_SIZE <= _Myres;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00031	72 0c		 jb	 SHORT $LN3@Large_stri
  00033	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  0003d	eb 0a		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  0003f	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
  00049	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv66[ebp]

; 2302 :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -20						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2291 :     _CONSTEXPR20 const value_type* _Myptr() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  00010	b9 06 00 00 00	 mov	 ecx, 6
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2292 :         const value_type* _Result = _Bx._Buf;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c0 04	 add	 eax, 4
  00030	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax

; 2293 :         if (_Large_string_engaged()) {

  00033	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0003b	0f b6 c0	 movzx	 eax, al
  0003e	85 c0		 test	 eax, eax
  00040	74 12		 je	 SHORT $LN2@Myptr

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  0004e	83 c4 04	 add	 esp, 4
  00051	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2295 :         }
; 2296 : 
; 2297 :         return _Result;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __Result$[ebp]

; 2298 :     }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 2271 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 04	 add	 ecx, 4
  00038	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 2272 : 
; 2273 :     // length of internal buffer, [1, 16]:
; 2274 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2275 :     // roundup mask for allocated buffers, [0, 15]:
; 2276 :     static constexpr size_type _ALLOC_MASK = sizeof(value_type) <= 1 ? 15
; 2277 :                                            : sizeof(value_type) <= 2 ? 7
; 2278 :                                            : sizeof(value_type) <= 4 ? 3
; 2279 :                                            : sizeof(value_type) <= 8 ? 1
; 2280 :                                                                      : 0;
; 2281 : 
; 2282 :     _CONSTEXPR20 value_type* _Myptr() noexcept {
; 2283 :         value_type* _Result = _Bx._Buf;
; 2284 :         if (_Large_string_engaged()) {
; 2285 :             _Result = _Unfancy(_Bx._Ptr);
; 2286 :         }
; 2287 : 
; 2288 :         return _Result;
; 2289 :     }
; 2290 : 
; 2291 :     _CONSTEXPR20 const value_type* _Myptr() const noexcept {
; 2292 :         const value_type* _Result = _Bx._Buf;
; 2293 :         if (_Large_string_engaged()) {
; 2294 :             _Result = _Unfancy(_Bx._Ptr);
; 2295 :         }
; 2296 : 
; 2297 :         return _Result;
; 2298 :     }
; 2299 : 
; 2300 :     _CONSTEXPR20 bool _Large_string_engaged() const noexcept {
; 2301 :         return _BUF_SIZE <= _Myres;
; 2302 :     }
; 2303 : 
; 2304 :     constexpr void _Activate_SSO_buffer() noexcept {
; 2305 :         // begin the lifetime of the array elements (e.g., before copying into them)
; 2306 : #if _HAS_CXX20
; 2307 :         if (_STD is_constant_evaluated()) {
; 2308 :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2309 :                 _Bx._Buf[_Idx] = value_type();
; 2310 :             }
; 2311 :         }
; 2312 : #endif // _HAS_CXX20
; 2313 :     }
; 2314 : 
; 2315 :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {
; 2316 :         // checks whether _Off is in the bounds of [0, size()]
; 2317 :         if (_Mysize < _Off) {
; 2318 :             _Xran();
; 2319 :         }
; 2320 :     }
; 2321 : 
; 2322 :     _CONSTEXPR20 void _Check_offset_exclusive(const size_type _Off) const {
; 2323 :         // checks whether _Off is in the bounds of [0, size())
; 2324 :         if (_Mysize <= _Off) {
; 2325 :             _Xran();
; 2326 :         }
; 2327 :     }
; 2328 : 
; 2329 :     [[noreturn]] static void _Xran() {
; 2330 :         _Xout_of_range("invalid string position");
; 2331 :     }
; 2332 : 
; 2333 :     _CONSTEXPR20 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2334 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2335 :         return (_STD min)(_Size, _Mysize - _Off);
; 2336 :     }
; 2337 : 
; 2338 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2339 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers
; 2340 : 
; 2341 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2342 : 
; 2343 :         value_type _Buf[_BUF_SIZE];
; 2344 :         pointer _Ptr;
; 2345 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2346 :     } _Bx;
; 2347 : 
; 2348 :     size_type _Mysize = 0; // current length of string

  0003d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00040	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 2349 :     size_type _Myres  = 0; // current storage reserved for string

  00047	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 2271 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

  00051	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00021	83 c8 ff	 or	 eax, -1

; 695  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 833  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$00@std@@YAII@Z ; std::_Get_size_of_n<1>
  00033	83 c4 04	 add	 esp, 4
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0003c	83 c4 04	 add	 esp, 4

; 836  :     }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

  0002a	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0002e	75 06		 jne	 SHORT $LN10@deallocate
  00030	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00034	75 02		 jne	 SHORT $LN7@deallocate
$LN10@deallocate:
  00036	eb 5c		 jmp	 SHORT $LN2@deallocate
$LN7@deallocate:
  00038	8b f4		 mov	 esi, esp
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00044	6a 00		 push	 0
  00046	68 3c 03 00 00	 push	 828			; 0000033cH
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
  00050	6a 02		 push	 2
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00058	83 c4 18	 add	 esp, 24			; 00000018H
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	83 f8 01	 cmp	 eax, 1
  00065	75 01		 jne	 SHORT $LN12@deallocate
  00067	cc		 int	 3
$LN12@deallocate:
  00068	8b f4		 mov	 esi, esp
  0006a	6a 00		 push	 0
  0006c	68 3c 03 00 00	 push	 828			; 0000033cH
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00086	83 c4 14	 add	 esp, 20			; 00000014H
  00089	3b f4		 cmp	 esi, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	33 c0		 xor	 eax, eax
  00092	75 a4		 jne	 SHORT $LN7@deallocate
$LN2@deallocate:
  00094	33 c0		 xor	 eax, eax
  00096	75 92		 jne	 SHORT $LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00098	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0009b	50		 push	 eax
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0009f	51		 push	 ecx
  000a0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000a5	83 c4 08	 add	 esp, 8

; 831  :     }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000b1	3b ec		 cmp	 ebp, esp
  000b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 819  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2366 : [[noreturn]] inline void _Xlen_string() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2367 :     _Xlength_error("string too long");

  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00026	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen_strin:

; 2368 : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 488  :     _NODISCARD static constexpr int_type eof() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 489  :         return static_cast<int_type>(EOF);

  00021	83 c8 ff	 or	 eax, -1

; 490  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 480  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d fc	 lea	 edi, DWORD PTR [ebp-4]
  0000f	b9 01 00 00 00	 mov	 ecx, 1
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 481  :         return _Left == _Right;

  00025	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002b	8b 10		 mov	 edx, DWORD PTR [eax]
  0002d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002f	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00031	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  0003b	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0003d	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00047	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 482  :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z PROC	; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 455  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 456  : #if _HAS_CXX20
; 457  :         if (_STD is_constant_evaluated()) {
; 458  :             return _Primary_char_traits::assign(_Left, _Right);
; 459  :         }
; 460  : #endif // _HAS_CXX20
; 461  :         _Left = _Right;

  00021	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00027	8a 11		 mov	 dl, BYTE PTR [ecx]
  00029	88 10		 mov	 BYTE PTR [eax], dl

; 462  :     }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ENDP	; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 402  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 403  :         // find length of null-terminated string
; 404  : #if _HAS_CXX17
; 405  : #ifdef __cpp_char8_t
; 406  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 407  : #if _HAS_U8_INTRINSICS
; 408  :             return __builtin_u8strlen(_First);
; 409  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 410  :             return _Primary_char_traits::length(_First);
; 411  : #endif // _HAS_U8_INTRINSICS
; 412  :         } else
; 413  : #endif // __cpp_char8_t
; 414  :         {
; 415  :             return __builtin_strlen(_First);
; 416  :         }
; 417  : #else // _HAS_CXX17
; 418  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _strlen
  0002a	83 c4 04	 add	 esp, 4

; 419  : #endif // _HAS_CXX17
; 420  :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Char_traits<char,int>::move, COMDAT

; 79   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 80   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 81   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 82   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 83   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 84   : #if _HAS_CXX20
; 85   :         if (_STD is_constant_evaluated()) {
; 86   :             // dest: [_First1, _First1 + _Count)
; 87   :             // src: [_First2, _First2 + _Count)
; 88   :             // We need to handle overlapping ranges.
; 89   :             // If _First1 is in the src range, we need a backward loop.
; 90   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 91   : 
; 92   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 93   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 94   :             bool _Loop_forward = true;
; 95   : 
; 96   :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 97   :                 if (_First1 == _Src) {
; 98   :                     _Loop_forward = false;
; 99   :                     break;
; 100  :                 }
; 101  :             }
; 102  : 
; 103  :             if (_Loop_forward) {
; 104  :                 for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 105  :                     _First1[_Idx] = _First2[_Idx];
; 106  :                 }
; 107  :             } else {
; 108  :                 for (size_t _Idx = _Count; _Idx != 0; --_Idx) {
; 109  :                     _First1[_Idx - 1] = _First2[_Idx - 1];
; 110  :                 }
; 111  :             }
; 112  : 
; 113  :             return _First1;
; 114  :         }
; 115  : #endif // _HAS_CXX20
; 116  : 
; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00021	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 _memmove
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 118  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 119  : 
; 120  :         return _First1;

  00035	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 121  :     }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Char_traits<char,int>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Char_traits<char,int>::copy, COMDAT

; 48   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 49   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 50   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 51   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 52   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 53   : #if _HAS_CXX20
; 54   :         if (_STD is_constant_evaluated()) {
; 55   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap; see LWG-3085
; 56   :             for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 57   :                 _First1[_Idx] = _First2[_Idx];
; 58   :             }
; 59   : 
; 60   :             return _First1;
; 61   :         }
; 62   : #endif // _HAS_CXX20
; 63   : 
; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00021	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 _memcpy
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 65   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 66   : 
; 67   :         return _First1;

  00035	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 68   :     }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Char_traits<char,int>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 224  :     is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0000f	b9 03 00 00 00	 mov	 ecx, 3
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __A997C6C5_xutility
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00025	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
  0002e	83 c4 04	 add	 esp, 4
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
  00037	83 c4 04	 add	 esp, 4
  0003a	50		 push	 eax
  0003b	6a 08		 push	 8
  0003d	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00042	83 c4 08	 add	 esp, 8
  00045	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
  00054	83 c4 04	 add	 esp, 4
  00057	8b 10		 mov	 edx, DWORD PTR [eax]
  00059	52		 push	 edx
  0005a	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00060	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 232  :     }
; 233  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __5E44C2A9_xstddef
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 281  :     return __builtin_addressof(_Val);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 282  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Basic_container_proxy_ptr12@std@@IAE@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT
; _this$ = ecx

; 1310 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1303 :     _Container_proxy* _Ptr = nullptr;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1310 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??0_Basic_container_proxy_ptr12@std@@IAE@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ PROC	; std::_Basic_container_proxy_ptr12::_Release, COMDAT
; _this$ = ecx

; 1305 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1306 :         _Ptr = nullptr;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1307 :     }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ENDP	; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -8						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>, COMDAT

; 651  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0000f	b9 03 00 00 00	 mov	 ecx, 3
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __A95B55BB_utility
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 652  :     // assign _New_val to _Val, return previous _Val
; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00025	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	89 4d f8	 mov	 DWORD PTR __Old_val$[ebp], ecx

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR __New_val$[ebp]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	89 10		 mov	 DWORD PTR [eax], edx

; 655  :     return _Old_val;

  00037	8b 45 f8	 mov	 eax, DWORD PTR __Old_val$[ebp]

; 656  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT
; _this$ = ecx

; 1086 :     void _Orphan_all_locked_v3() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00027	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  0002f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1087 :         _Lockit _Lock(_LOCK_DEBUG);

  00034	8b f4		 mov	 esi, esp
  00036	6a 03		 push	 3
  00038	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00041	3b f4		 cmp	 esi, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1088 :         _Orphan_all_unlocked_v3();

  00048	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1089 :     }

  00050	8b f4		 mov	 esi, esp
  00052	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	52		 push	 edx
  00063	8b cd		 mov	 ecx, ebp
  00065	50		 push	 eax
  00066	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Orphan_all
  0006c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00071	58		 pop	 eax
  00072	5a		 pop	 edx
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00079	33 cd		 xor	 ecx, ebp
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
  00091	0f 1f 00	 npad	 3
$LN5@Orphan_all:
  00094	01 00 00 00	 DD	 1
  00098	00 00 00 00	 DD	 $LN4@Orphan_all
$LN4@Orphan_all:
  0009c	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000a0	04 00 00 00	 DD	 4
  000a4	00 00 00 00	 DD	 $LN3@Orphan_all
$LN3@Orphan_all:
  000a8	5f		 DB	 95			; 0000005fH
  000a9	4c		 DB	 76			; 0000004cH
  000aa	6f		 DB	 111			; 0000006fH
  000ab	63		 DB	 99			; 00000063H
  000ac	6b		 DB	 107			; 0000006bH
  000ad	00		 DB	 0
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
__Pnext$2 = -20						; size = 4
_this$ = -8						; size = 4
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT
; _this$ = ecx

; 1226 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  00010	b9 09 00 00 00	 mov	 ecx, 9
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1227 :     if (!_Myproxy) { // no proxy, already done

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00030	75 02		 jne	 SHORT $LN5@Orphan_all

; 1228 :         return;

  00032	eb 41		 jmp	 SHORT $LN6@Orphan_all
$LN5@Orphan_all:

; 1229 :     }
; 1230 : 
; 1231 :     // proxy allocated, drain it
; 1232 :     for (auto _Pnext = _STD exchange(_Myproxy->_Myfirstiter, nullptr); _Pnext; _Pnext = _Pnext->_Mynextiter) {

  00034	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0
  0003e	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00044	50		 push	 eax
  00045	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004a	83 c2 04	 add	 edx, 4
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 ??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
  00053	83 c4 08	 add	 esp, 8
  00056	89 45 ec	 mov	 DWORD PTR __Pnext$2[ebp], eax
  00059	eb 09		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
  0005b	8b 45 ec	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0005e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00061	89 4d ec	 mov	 DWORD PTR __Pnext$2[ebp], ecx
$LN4@Orphan_all:
  00064	83 7d ec 00	 cmp	 DWORD PTR __Pnext$2[ebp], 0
  00068	74 0b		 je	 SHORT $LN6@Orphan_all

; 1233 :         _Pnext->_Myproxy = nullptr;

  0006a	8b 45 ec	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0006d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1234 :     }

  00073	eb e6		 jmp	 SHORT $LN2@Orphan_all
$LN6@Orphan_all:

; 1235 : }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1237 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1238 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1239 : #if _HAS_CXX20
; 1240 :     if (_STD is_constant_evaluated()) {
; 1241 :         _Orphan_all_unlocked_v3();
; 1242 :     } else
; 1243 : #endif // _HAS_CXX20
; 1244 :     {
; 1245 :         _Orphan_all_locked_v3();

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1246 :     }
; 1247 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1248 : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1055 :     _CONSTEXPR20 _Container_base12() noexcept = default;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1056 : 
; 1057 :     _Container_base12(const _Container_base12&)            = delete;
; 1058 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1059 : 
; 1060 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1061 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1062 : 
; 1063 :     template <class _Alloc>
; 1064 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1065 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1066 :         _Construct_in_place(*_New_proxy, this);
; 1067 :         _Myproxy            = _New_proxy;
; 1068 :         _New_proxy->_Mycont = this;
; 1069 :     }
; 1070 : 
; 1071 :     template <class _Alloc>
; 1072 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1073 :         // pre: no iterators refer to the existing proxy
; 1074 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1075 :         _Construct_in_place(*_New_proxy, this);
; 1076 :         _New_proxy->_Mycont = this;
; 1077 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1078 :     }
; 1079 : 
; 1080 :     _Container_proxy* _Myproxy = nullptr;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1055 :     _CONSTEXPR20 _Container_base12() noexcept = default;

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1047 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Mycont_$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 1048 : 
; 1049 :     const _Container_base12* _Mycont       = nullptr;
; 1050 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1047 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

  0003c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -44					; size = 4
__Min_back_shift$ = -32					; size = 4
__Ptr_container$ = -20					; size = 4
__Ptr_user$ = -8					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

  00025	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	83 c1 27	 add	 ecx, 39			; 00000027H
  0002d	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  00030	89 0a		 mov	 DWORD PTR [edx], ecx

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

  00032	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 4d f8	 mov	 DWORD PTR __Ptr_user$[ebp], ecx

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003a	b8 04 00 00 00	 mov	 eax, 4
  0003f	6b c8 ff	 imul	 ecx, eax, -1
  00042	8b 55 f8	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  00045	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00048	89 45 ec	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	6b c8 fe	 imul	 ecx, eax, -2
  00053	8b 55 f8	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  00056	81 3c 0a fa fa
	fa fa		 cmp	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH
  0005d	75 02		 jne	 SHORT $LN7@Adjust_man
  0005f	eb 64		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  00061	8b f4		 mov	 esi, esp
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0006d	6a 00		 push	 0
  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  00074	83 c0 09	 add	 eax, 9
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
  0007d	6a 02		 push	 2
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00085	83 c4 18	 add	 esp, 24			; 00000018H
  00088	3b f4		 cmp	 esi, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	83 f8 01	 cmp	 eax, 1
  00092	75 01		 jne	 SHORT $LN19@Adjust_man
  00094	cc		 int	 3
$LN19@Adjust_man:
  00095	8b f4		 mov	 esi, esp
  00097	6a 00		 push	 0
  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  0009e	83 c0 09	 add	 eax, 9
  000a1	50		 push	 eax
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000b7	83 c4 14	 add	 esp, 20			; 00000014H
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	33 c0		 xor	 eax, eax
  000c3	75 9c		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  000c5	33 c0		 xor	 eax, eax
  000c7	75 82		 jne	 SHORT $LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  000c9	c7 45 e0 08 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 8

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000d0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	2b 4d ec	 sub	 ecx, DWORD PTR __Ptr_container$[ebp]
  000d8	89 4d d4	 mov	 DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000db	83 7d d4 08	 cmp	 DWORD PTR __Back_shift$[ebp], 8
  000df	72 08		 jb	 SHORT $LN13@Adjust_man
  000e1	83 7d d4 27	 cmp	 DWORD PTR __Back_shift$[ebp], 39 ; 00000027H
  000e5	77 02		 ja	 SHORT $LN13@Adjust_man
  000e7	eb 64		 jmp	 SHORT $LN8@Adjust_man
$LN13@Adjust_man:
  000e9	8b f4		 mov	 esi, esp
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000f5	6a 00		 push	 0
  000f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  000fc	83 c0 13	 add	 eax, 19			; 00000013H
  000ff	50		 push	 eax
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@ONGHGEHM@C?3?2Program?5Files?2Microsoft?5Visu@
  00105	6a 02		 push	 2
  00107	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0010d	83 c4 18	 add	 esp, 24			; 00000018H
  00110	3b f4		 cmp	 esi, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	83 f8 01	 cmp	 eax, 1
  0011a	75 01		 jne	 SHORT $LN20@Adjust_man
  0011c	cc		 int	 3
$LN20@Adjust_man:
  0011d	8b f4		 mov	 esi, esp
  0011f	6a 00		 push	 0
  00121	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  00126	83 c0 13	 add	 eax, 19			; 00000013H
  00129	50		 push	 eax
  0012a	68 00 00 00 00	 push	 OFFSET ??_C@_1ME@DGNBIMPE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00139	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0013f	83 c4 14	 add	 esp, 20			; 00000014H
  00142	3b f4		 cmp	 esi, esp
  00144	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00149	33 c0		 xor	 eax, eax
  0014b	75 9c		 jne	 SHORT $LN13@Adjust_man
$LN8@Adjust_man:
  0014d	33 c0		 xor	 eax, eax
  0014f	75 8a		 jne	 SHORT $LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00151	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00154	8b 4d ec	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  00157	89 08		 mov	 DWORD PTR [eax], ecx

; 166  : }

  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx
  0015c	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00162	3b ec		 cmp	 ebp, esp
  00164	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 76   :         void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __C3CE3678_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 77   :         return ::operator new(_Bytes);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002a	83 c4 04	 add	 esp, 4

; 78   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 552  :     _NODISCARD static constexpr int(max)() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B3F344F6_limits
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 553  :         return INT_MAX;

  00021	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 554  :     }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -208						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d ec	 lea	 edi, DWORD PTR [ebp-20]
  0000f	b9 05 00 00 00	 mov	 ecx, 5
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __5D994F5F_exception
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 324  :     _THROW(bad_array_new_length{});

  00025	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0002b	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  00030	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00035	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 325  : }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UAE@XZ
  00028	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002b	83 e0 01	 and	 eax, 1
  0002e	74 0e		 je	 SHORT $LN2@scalar
  00030	6a 0c		 push	 12			; 0000000cH
  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00023	50		 push	 eax
  00024	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@ABV01@@Z
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __1BEF3287_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 140  :         : bad_alloc("bad array new length")

  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AAE@QBD@Z ; std::bad_alloc::bad_alloc

; 141  :     {

  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00028	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002b	83 e0 01	 and	 eax, 1
  0002e	74 0e		 je	 SHORT $LN2@scalar
  00030	6a 0c		 push	 12			; 0000000cH
  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00023	50		 push	 eax
  00024	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 130  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __1BEF3287_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 129  :         : exception(_Message, 1)

  0002a	6a 01		 push	 1
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBDH@Z ; std::exception::exception

; 130  :     {

  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 131  :     }

  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00028	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002b	83 e0 01	 and	 eax, 1
  0002e	74 0e		 je	 SHORT $LN2@scalar
  00030	6a 0c		 push	 12			; 0000000cH
  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  00010	b9 04 00 00 00	 mov	 ecx, 4
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __1BEF3287_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00031	74 0e		 je	 SHORT $LN3@what
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00039	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv69[ebp], edx
  0003f	eb 0a		 jmp	 SHORT $LN4@what
$LN3@what:
  00041	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  0004b	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 89   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __1BEF3287_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c0 04	 add	 eax, 4
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4

; 91   :     }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __1BEF3287_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00033	33 c0		 xor	 eax, eax
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 04	 add	 ecx, 4
  0003b	89 01		 mov	 DWORD PTR [ecx], eax
  0003d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 c0 04	 add	 eax, 4
  00046	50		 push	 eax
  00047	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  0004a	83 c1 04	 add	 ecx, 4
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ___std_exception_copy
  00053	83 c4 08	 add	 esp, 8

; 74   :     }

  00056	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __1BEF3287_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00033	33 c0		 xor	 eax, eax
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 04	 add	 ecx, 4
  0003b	89 01		 mov	 DWORD PTR [ecx], eax
  0003d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  00046	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 68   :     }

  00049	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 168  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __E81B5085_vcruntime_new@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 169  :         (void)_Size;
; 170  :         return _Where;

  00021	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 171  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\User\Desktop\Everythin' for BSTU\Narkevich\All laboratory works\2-ой семестр\решения лбр\LBR_03\LBR_01\monthName.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __0393C2D9_monthName@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\User\Desktop\Everythin' for BSTU\Narkevich\All laboratory works\2-ой семестр\решения лбр\LBR_03\LBR_01\monthName.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __0393C2D9_monthName@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END

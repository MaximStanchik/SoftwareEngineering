; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

	TITLE	D:\User\Desktop\Everythin' for BSTU\Narkevich\All laboratory works\2-ой семестр\решения лбр\LBR_03\LBR_01\Debug\Congratulations.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__CD417A16_concurrencysal@h DB 01H
__18C11F8D_sal@h DB 01H
__BD42D05E_vadefs@h DB 01H
__2DC9DF70_vcruntime@h DB 01H
__C9149A6D_xkeycheck@h DB 01H
__94F3B4AE_yvals_core@h DB 01H
__7B399007_limits@h DB 01H
__1AB9F2C2_climits DB 01H
__04C75F1C_corecrt@h DB 01H
__E81B5085_vcruntime_new@h DB 01H
__130137D5_vcruntime_new_debug@h DB 01H
__8CF369C8_crtdbg@h DB 01H
__95C621C9_crtdefs@h DB 01H
__FEED0ABF_use_ansi@h DB 01H
__2816668F_yvals@h DB 01H
__92857972_corecrt_math@h DB 01H
__A29DED85_math@h DB 01H
__494656A0_corecrt_malloc@h DB 01H
__0C5B3DCC_stddef@h DB 01H
__F1F53BCE_corecrt_search@h DB 01H
__DD5AA43A_corecrt_wstdlib@h DB 01H
__71F46169_stdlib@h DB 01H
__9E56D030_cstdlib DB 01H
__05E338F6_xtr1common DB 01H
__99FA516B_intrin0@inl@h DB 01H
__8CEB98C2_intrin0@h DB 01H
__7A7B113A_cmath DB 01H
__C44F8F6B_corecrt_stdio_config@h DB 01H
__A7F89B2B_corecrt_wstdio@h DB 01H
__B5C48800_stdio@h DB 01H
__A651C215_cstdio DB 01H
__15E49872_errno@h DB 01H
__6BB4896E_vcruntime_string@h DB 01H
__184F7456_corecrt_memcpy_s@h DB 01H
__82377222_corecrt_memory@h DB 01H
__5B29309E_corecrt_wstring@h DB 01H
__F787F5CD_string@h DB 01H
__D2C478D0_cstring DB 01H
__E387ED1C_corecrt_wconio@h DB 01H
__78D0C915_corecrt_wctype@h DB 01H
__02A4DD57_corecrt_wdirect@h DB 01H
__A056EFF3_corecrt_share@h DB 01H
__91FC0EDF_corecrt_wio@h DB 01H
__6619318A_corecrt_wprocess@h DB 01H
__18070508_corecrt_wtime@h DB 01H
__3D2AFB26_types@h DB 01H
__72103B05_stat@h DB 01H
__4BE26BFD_wchar@h DB 01H
__3CDA1446_cwchar DB 01H
__3B9D0A9D_cstddef DB 01H
__D7870C25_initializer_list DB 01H
__5E44C2A9_xstddef DB 01H
__7F1A9170_iosfwd DB 01H
__C54FBE38_stdint@h DB 01H
__2308314D_cstdint DB 01H
__87BD5CA6_type_traits DB 01H
__A95B55BB_utility DB 01H
__EE76B579___msvc_iter_core@hpp DB 01H
__A997C6C5_xutility DB 01H
__B83B7185_iterator DB 01H
__83BF90D8_share@h DB 01H
__9D384591___msvc_system_error_abi@hpp DB 01H
__3B70B6EE_cerrno DB 01H
__E5D9469F_malloc@h DB 01H
__C78E68C1_corecrt_terminate@h DB 01H
__510B0051_eh@h DB 01H
__1BEF3287_vcruntime_exception@h DB 01H
__5D994F5F_exception DB 01H
__CDB0EEF0_float@h DB 01H
__D5150992_cfloat DB 01H
__B83F831D_isa_availability@h DB 01H
__B3F344F6_limits DB 01H
__7E4C13A5_new DB 01H
__5795C389_xatomic@h DB 01H
__C3CE3678_xmemory DB 01H
__B71DB0E4_xstring DB 01H
__D4D77502_stdexcept DB 01H
__D76B6AFE_xcall_once@h DB 01H
__80837380_xerrc@h DB 01H
__93FD7E51_time@h DB 01H
__BCC88D32_ctime DB 01H
__1F532584_xtimec@h DB 01H
__9FA33D0C_xthreads@h DB 01H
__D8C61834_atomic DB 01H
__683678DE_system_error DB 01H
__FA9853E6_vcruntime_typeinfo@h DB 01H
__D94835DC_typeinfo DB 01H
__0F5D4878_memory DB 01H
__23181F77_xfacet DB 01H
__274043E2___msvc_xlocinfo_types@hpp DB 01H
__6AECDA3E_ctype@h DB 01H
__A99A25B2_cctype DB 01H
__66B29864_locale@h DB 01H
__0DFA0CE1_clocale DB 01H
__C6C1D614_xlocinfo DB 01H
__6823C4D5_xlocale DB 01H
__FF24A107_xiosbase DB 01H
__D677CDBE_streambuf DB 01H
__F6A4A2C2_xlocnum DB 01H
__868129B3_ios DB 01H
__7B331E11_ostream DB 01H
__18E32B2B_istream DB 01H
__CBEEBCDA_iostream DB 01H
__1EA7981F_Time@h DB 01H
__5EC8F362_LeapOrNot@h DB 01H
__9701E443_NumberOfDay@h DB 01H
__8D4DE340_Congratulations@h DB 01H
__D8D58B4A_monthName@h DB 01H
__1E5359E2_stdafx@h DB 01H
__BA1596A1_Congratulations@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?numindays@@YAHH@Z				; numindays
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0GO@GJLMIJCE@?B?b?e?d?h?r?e?5?o?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?0?5?o@ ; `string'
PUBLIC	??_C@_0BJ@PODMPIC@?M?e?b?e?p?m?n?e?5?j?n?k?h?w?e?q?r?b?n?5?d?m?e?i@ ; `string'
PUBLIC	??_C@_0BJ@COKNJCAO@?U?n?p?n?x?$OA?$PP?5?o?n?o?$PL?r?j?$OA?0?5?m?n?5?m?e?r?$CJ@ ; `string'
PUBLIC	??_C@_04MIBODLF@?9?n?e?5@			; `string'
PUBLIC	??_C@_0BC@IIKLDLKO@?B?$PL?5?s?j?$OA?g?$OA?k?h?5?d?$OA?r?s?3?5@ ; `string'
PUBLIC	??_C@_0DG@FOGMOELP@?7?Q?5?d?m?e?l?5?o?p?n?c?p?$OA?l?l?h?q?r?$OA?$CB?$CB?$CB?5?O?p?n?c?p?$OA?l@ ; `string'
PUBLIC	??_C@_0DE@POPDDBCO@?7?B?5?$PN?r?n?r?5?d?n?k?c?n?f?d?$OA?m?m?$PL?i?5?d?e?m?$PM?5?o?p?$OA?g?d@ ; `string'
PUBLIC	??_C@_0CH@PCMDKMDJ@?7?S?p?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$CB?$CB?$CB?5?O?e?p?b?$PL?i?5?d?e?m@ ; `string'
PUBLIC	??_C@_0CC@OKGENNBC@?7?Q?5?M?n?b?$PL?l?5?c?n?d?n?l?$CB?5?Q?5?m?n?b?$PL?l?5?q?w?$OA?q?r?$PM?e@ ; `string'
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z:PROC
EXTRN	?leapOrNot@@YA_NH@Z:PROC			; leapOrNot
EXTRN	?monthName@@YAXH@Z:PROC				; monthName
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CC@OKGENNBC@?7?Q?5?M?n?b?$PL?l?5?c?n?d?n?l?$CB?5?Q?5?m?n?b?$PL?l?5?q?w?$OA?q?r?$PM?e@
CONST	SEGMENT
??_C@_0CC@OKGENNBC@?7?Q?5?M?n?b?$PL?l?5?c?n?d?n?l?$CB?5?Q?5?m?n?b?$PL?l?5?q?w?$OA?q?r?$PM?e@ DB 09H
	DB	0d1H, ' ', 0cdH, 0eeH, 0e2H, 0fbH, 0ecH, ' ', 0e3H, 0eeH, 0e4H
	DB	0eeH, 0ecH, '! ', 0d1H, ' ', 0edH, 0eeH, 0e2H, 0fbH, 0ecH, ' ', 0f1H
	DB	0f7H, 0e0H, 0f1H, 0f2H, 0fcH, 0e5H, 0ecH, '!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PCMDKMDJ@?7?S?p?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$CB?$CB?$CB?5?O?e?p?b?$PL?i?5?d?e?m@
CONST	SEGMENT
??_C@_0CH@PCMDKMDJ@?7?S?p?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$CB?$CB?$CB?5?O?e?p?b?$PL?i?5?d?e?m@ DB 09H
	DB	0d3H, 0f0H, 0e0H, 0e0H, 0e0H, 0e0H, 0e0H, 0e0H, 0e0H, 0e0H, 0e0H
	DB	0e0H, 0e0H, 0e0H, 0e0H, 0e0H, '!!! ', 0cfH, 0e5H, 0f0H, 0e2H, 0fbH
	DB	0e9H, ' ', 0e4H, 0e5H, 0edH, 0e1H, ' ', 0ebH, 0e5H, 0f2H, 0e0H
	DB	'!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@POPDDBCO@?7?B?5?$PN?r?n?r?5?d?n?k?c?n?f?d?$OA?m?m?$PL?i?5?d?e?m?$PM?5?o?p?$OA?g?d@
CONST	SEGMENT
??_C@_0DE@POPDDBCO@?7?B?5?$PN?r?n?r?5?d?n?k?c?n?f?d?$OA?m?m?$PL?i?5?d?e?m?$PM?5?o?p?$OA?g?d@ DB 09H
	DB	0c2H, ' ', 0fdH, 0f2H, 0eeH, 0f2H, ' ', 0e4H, 0eeH, 0ebH, 0e3H
	DB	0eeH, 0e6H, 0e4H, 0e0H, 0edH, 0edH, 0fbH, 0e9H, ' ', 0e4H, 0e5H
	DB	0edH, 0fcH, ' ', 0efH, 0f0H, 0e0H, 0e7H, 0e4H, 0edH, 0f3H, 0e5H
	DB	0f2H, 0f1H, 0ffH, ' ', 0c6H, 0e5H, 0edH, 0f1H, 0eaH, 0e8H, 0e9H
	DB	' ', 0e4H, 0e5H, 0edH, 0fcH, '.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@FOGMOELP@?7?Q?5?d?m?e?l?5?o?p?n?c?p?$OA?l?l?h?q?r?$OA?$CB?$CB?$CB?5?O?p?n?c?p?$OA?l@
CONST	SEGMENT
??_C@_0DG@FOGMOELP@?7?Q?5?d?m?e?l?5?o?p?n?c?p?$OA?l?l?h?q?r?$OA?$CB?$CB?$CB?5?O?p?n?c?p?$OA?l@ DB 09H
	DB	0d1H, ' ', 0e4H, 0edH, 0e5H, 0ecH, ' ', 0efH, 0f0H, 0eeH, 0e3H
	DB	0f0H, 0e0H, 0ecH, 0ecH, 0e8H, 0f1H, 0f2H, 0e0H, '!!! ', 0cfH, 0f0H
	DB	0eeH, 0e3H, 0f0H, 0e0H, 0ecH, 0ecH, 0e8H, 0f0H, 0eeH, 0e2H, 0e0H
	DB	0edH, 0e8H, 0e5H, ' ', 0fdH, 0f2H, 0eeH, ' ', 0eaH, 0f0H, 0f3H
	DB	0f2H, 0eeH, '!!!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IIKLDLKO@?B?$PL?5?s?j?$OA?g?$OA?k?h?5?d?$OA?r?s?3?5@
CONST	SEGMENT
??_C@_0BC@IIKLDLKO@?B?$PL?5?s?j?$OA?g?$OA?k?h?5?d?$OA?r?s?3?5@ DB 0c2H, 0fbH
	DB	' ', 0f3H, 0eaH, 0e0H, 0e7H, 0e0H, 0ebH, 0e8H, ' ', 0e4H, 0e0H
	DB	0f2H, 0f3H, ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIBODLF@?9?n?e?5@
CONST	SEGMENT
??_C@_04MIBODLF@?9?n?e?5@ DB '-', 0eeH, 0e5H, ' ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@COKNJCAO@?U?n?p?n?x?$OA?$PP?5?o?n?o?$PL?r?j?$OA?0?5?m?n?5?m?e?r?$CJ@
CONST	SEGMENT
??_C@_0BJ@COKNJCAO@?U?n?p?n?x?$OA?$PP?5?o?n?o?$PL?r?j?$OA?0?5?m?n?5?m?e?r?$CJ@ DB 0d5H
	DB	0eeH, 0f0H, 0eeH, 0f8H, 0e0H, 0ffH, ' ', 0efH, 0eeH, 0efH, 0fbH
	DB	0f2H, 0eaH, 0e0H, ', ', 0edH, 0eeH, ' ', 0edH, 0e5H, 0f2H, ')', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PODMPIC@?M?e?b?e?p?m?n?e?5?j?n?k?h?w?e?q?r?b?n?5?d?m?e?i@
CONST	SEGMENT
??_C@_0BJ@PODMPIC@?M?e?b?e?p?m?n?e?5?j?n?k?h?w?e?q?r?b?n?5?d?m?e?i@ DB 0cdH
	DB	0e5H, 0e2H, 0e5H, 0f0H, 0edH, 0eeH, 0e5H, ' ', 0eaH, 0eeH, 0ebH
	DB	0e8H, 0f7H, 0e5H, 0f1H, 0f2H, 0e2H, 0eeH, ' ', 0e4H, 0edH, 0e5H
	DB	0e9H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GO@GJLMIJCE@?B?b?e?d?h?r?e?5?o?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?0?5?o@
CONST	SEGMENT
??_C@_0GO@GJLMIJCE@?B?b?e?d?h?r?e?5?o?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?0?5?o@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0efH, 0eeH, 0f0H, 0ffH
	DB	0e4H, 0eaH, 0eeH, 0e2H, 0fbH, 0e9H, ' ', 0edH, 0eeH, 0ecH, 0e5H
	DB	0f0H, ' ', 0e4H, 0edH, 0ffH, ', ', 0efH, 0eeH, 0f1H, 0ebH, 0e5H
	DB	' ', 0f7H, 0e5H, 0e3H, 0eeH, ' ', 0e1H, 0f3H, 0e4H, 0e5H, 0f2H
	DB	' ', 0e2H, 0fbH, 0e2H, 0e5H, 0e4H, 0e5H, 0edH, 0eeH, ' ', 0f7H
	DB	0e8H, 0f1H, 0ebH, 0eeH, ' ', 0e8H, ' ', 0ecH, 0e5H, 0f1H, 0ffH
	DB	0f6H, ', ', 0f1H, 0eeH, 0eeH, 0f2H, 0e2H, 0e5H, 0f2H, 0f1H, 0f2H
	DB	0e2H, 0f3H, 0feH, 0f9H, 0e8H, 0e5H, ' ', 0efH, 0eeH, 0f0H, 0ffH
	DB	0e4H, 0eaH, 0eeH, 0e2H, 0eeH, 0ecH, 0f3H, ' ', 0edH, 0eeH, 0ecH
	DB	0e5H, 0f0H, 0f3H, ' ', 0e4H, 0edH, 0ffH, 00H	; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	0477H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	022H
	DW	038dH
voltbl	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 123  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __7B331E11_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 124  :             return _Ok;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 125  :         }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -229						; size = 1
__Zero_uncaught_exceptions$ = -29			; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 108  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __7B331E11_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 109  : #if !_HAS_EXCEPTIONS
; 110  :             const bool _Zero_uncaught_exceptions = true;
; 111  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 112  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00049	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0004e	0f b6 c0	 movzx	 eax, al
  00051	85 c0		 test	 eax, eax
  00053	75 09		 jne	 SHORT $LN4@sentry
  00055	c6 85 1b ff ff
	ff 01		 mov	 BYTE PTR tv72[ebp], 1
  0005c	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  0005e	c6 85 1b ff ff
	ff 00		 mov	 BYTE PTR tv72[ebp], 0
$LN5@sentry:
  00065	8a 8d 1b ff ff
	ff		 mov	 cl, BYTE PTR tv72[ebp]
  0006b	88 4d e3	 mov	 BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 113  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 114  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 115  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 116  : 
; 117  :             if (_Zero_uncaught_exceptions) {

  0006e	0f b6 45 e3	 movzx	 eax, BYTE PTR __Zero_uncaught_exceptions$[ebp]
  00072	85 c0		 test	 eax, eax
  00074	74 14		 je	 SHORT $LN1@sentry

; 118  :                 this->_Myostr._Osfx();

  00076	8b f4		 mov	 esi, esp
  00078	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 119  :             }
; 120  :         }

  0008a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
  000b1	cc		 int	 3
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Tied$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 91   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0001e	b9 06 00 00 00	 mov	 ecx, 6
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __7B331E11_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00049	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 92   :             if (!_Ostr.good()) {

  0005c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00064	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00067	8b f4		 mov	 esi, esp
  00069	8b ca		 mov	 ecx, edx
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	0f b6 c0	 movzx	 eax, al
  0007b	85 c0		 test	 eax, eax
  0007d	75 09		 jne	 SHORT $LN2@sentry

; 93   :                 _Ok = false;

  0007f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00082	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 94   :                 return;

  00086	eb 6a		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 95   :             }
; 96   : 
; 97   :             const auto _Tied = _Ostr.tie();

  00088	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00090	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00093	8b f4		 mov	 esi, esp
  00095	8b ca		 mov	 ecx, edx
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	89 45 e0	 mov	 DWORD PTR __Tied$[ebp], eax

; 98   :             if (!_Tied || _Tied == &_Ostr) {

  000a7	83 7d e0 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  000ab	74 08		 je	 SHORT $LN4@sentry
  000ad	8b 45 e0	 mov	 eax, DWORD PTR __Tied$[ebp]
  000b0	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b3	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 99   :                 _Ok = true;

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 100  :                 return;

  000bc	eb 34		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 101  :             }
; 102  : 
; 103  :             _Tied->flush();

  000be	8b f4		 mov	 esi, esp
  000c0	8b 4d e0	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 104  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000d0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000d8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000db	8b f4		 mov	 esi, esp
  000dd	8b ca		 mov	 ecx, edx
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000e5	3b f4		 cmp	 esi, esp
  000e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ec	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 105  :         }

  000f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00106	59		 pop	 ecx
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00110	3b ec		 cmp	 ebp, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 77   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __7B331E11_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 78   :             const auto _Rdbuf = _Myostr.rdbuf();

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00054	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00062	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00065	8b f4		 mov	 esi, esp
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	89 45 e0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 79   :             if (_Rdbuf) {

  00077	83 7d e0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0007b	74 16		 je	 SHORT $LN3@Sentry_bas

; 80   :                 _Rdbuf->_Unlock();

  0007d	8b 45 e0	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00080	8b 10		 mov	 edx, DWORD PTR [eax]
  00082	8b f4		 mov	 esi, esp
  00084	8b 4d e0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00087	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008a	ff d0		 call	 eax
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 81   :             }
; 82   :         }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
  000b6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 70   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __7B331E11_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 71   :             const auto _Rdbuf = _Myostr.rdbuf();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  0003d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004e	8b f4		 mov	 esi, esp
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 72   :             if (_Rdbuf) {

  00060	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00064	74 16		 je	 SHORT $LN1@Sentry_bas

; 73   :                 _Rdbuf->_Lock();

  00066	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00069	8b 10		 mov	 edx, DWORD PTR [eax]
  0006b	8b f4		 mov	 esi, esp
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00070	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00073	ff d0		 call	 eax
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 74   :             }
; 75   :         }

  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 1005 :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __7B331E11_ostream
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1006 :     _Ostr.put(_Ostr.widen('\n'));

  00021	8b f4		 mov	 esi, esp
  00023	6a 0a		 push	 10			; 0000000aH
  00025	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0002d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00030	8b ca		 mov	 ecx, edx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b f4		 mov	 esi, esp
  00041	0f b6 c0	 movzx	 eax, al
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1007 :     _Ostr.flush();

  00055	8b f4		 mov	 esi, esp
  00057	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1008 :     return _Ostr;

  00067	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 1009 : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv343 = -348						; size = 8
tv291 = -344						; size = 4
tv288 = -344						; size = 8
tv286 = -344						; size = 4
tv329 = -340						; size = 8
tv290 = -340						; size = 4
tv285 = -340						; size = 4
tv287 = -336						; size = 4
tv137 = -336						; size = 4
tv289 = -333						; size = 1
tv284 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 761  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00021	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __7B331E11_ostream
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 762  :     // insert NTBS into char stream
; 763  :     using _Elem = char;
; 764  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 765  : 
; 766  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 767  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00055	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  0005e	83 c4 04	 add	 esp, 4
  00061	33 c9		 xor	 ecx, ecx
  00063	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00066	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 768  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00069	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00071	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00074	8b f4		 mov	 esi, esp
  00076	8b ca		 mov	 ecx, edx
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv329[ebp], eax
  0008b	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv329[ebp+4], edx
  00091	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp+4], 0
  00098	7c 79		 jl	 SHORT $LN17@operator
  0009a	7f 09		 jg	 SHORT $LN24@operator
  0009c	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp], 0
  000a3	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  000a5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ad	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b0	8b f4		 mov	 esi, esp
  000b2	8b ca		 mov	 ecx, edx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv343[ebp], eax
  000c7	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv343[ebp+4], edx
  000cd	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv343[ebp+4]
  000d3	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000d6	7c 3b		 jl	 SHORT $LN17@operator
  000d8	7f 0b		 jg	 SHORT $LN25@operator
  000da	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv343[ebp]
  000e0	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000e3	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000e8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000ed	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000f0	8b f4		 mov	 esi, esp
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  00102	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  00105	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  0010b	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00111	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00113	0f 57 c0	 xorps	 xmm0, xmm0
  00116	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  0011e	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00124	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  0012a	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  0012d	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 769  :     const typename _Myos::sentry _Ok(_Ostr);

  00130	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00133	50		 push	 eax
  00134	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00137	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0013c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 770  : 
; 771  :     if (!_Ok) {

  00143	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00146	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0014b	0f b6 c0	 movzx	 eax, al
  0014e	85 c0		 test	 eax, eax
  00150	75 0e		 jne	 SHORT $LN8@operator

; 772  :         _State |= ios_base::badbit;

  00152	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00155	83 c8 04	 or	 eax, 4
  00158	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 773  :     } else { // state okay, insert

  0015b	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 774  :         _TRY_IO_BEGIN

  00160	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 775  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00164	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00167	8b 08		 mov	 ecx, DWORD PTR [eax]
  00169	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0016c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0016f	8b f4		 mov	 esi, esp
  00171	8b ca		 mov	 ecx, edx
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00179	3b f4		 cmp	 esi, esp
  0017b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00180	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00186	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  0018c	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00191	83 f8 40	 cmp	 eax, 64			; 00000040H
  00194	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 776  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0019a	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0019c	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  0019f	83 e8 01	 sub	 eax, 1
  001a2	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  001a5	83 d9 00	 sbb	 ecx, 0
  001a8	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  001ab	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001ae	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001b2	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001b8	7f 0a		 jg	 SHORT $LN26@operator
  001ba	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001be	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 777  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001c4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001cc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001cf	8b f4		 mov	 esi, esp
  001d1	8b ca		 mov	 ecx, edx
  001d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001d9	3b f4		 cmp	 esi, esp
  001db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e0	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv284[ebp], al
  001e6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001eb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001f1	8b f4		 mov	 esi, esp
  001f3	8b ca		 mov	 ecx, edx
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001fb	3b f4		 cmp	 esi, esp
  001fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00202	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00208	8b f4		 mov	 esi, esp
  0020a	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv284[ebp]
  00211	50		 push	 eax
  00212	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00218	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0021e	3b f4		 cmp	 esi, esp
  00220	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00225	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0022b	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  00231	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00237	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0023c	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00242	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00248	52		 push	 edx
  00249	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0024f	50		 push	 eax
  00250	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00255	83 c4 08	 add	 esp, 8
  00258	0f b6 c8	 movzx	 ecx, al
  0025b	85 c9		 test	 ecx, ecx
  0025d	74 0b		 je	 SHORT $LN12@operator

; 778  :                     _State |= ios_base::badbit; // insertion failed, quit

  0025f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00262	83 c8 04	 or	 eax, 4
  00265	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 779  :                     break;

  00268	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 780  :                 }
; 781  :             }

  0026a	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 782  :         }
; 783  : 
; 784  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0026f	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00273	75 6e		 jne	 SHORT $LN13@operator
  00275	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00278	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0027d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00280	8b f4		 mov	 esi, esp
  00282	8b ca		 mov	 ecx, edx
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0028a	3b f4		 cmp	 esi, esp
  0028c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00291	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  00297	8b f4		 mov	 esi, esp
  00299	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0029c	50		 push	 eax
  0029d	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  002a0	51		 push	 ecx
  002a1	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  002a4	52		 push	 edx
  002a5	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp]
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002b1	3b f4		 cmp	 esi, esp
  002b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b8	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv288[ebp], eax
  002be	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv288[ebp+4], edx
  002c4	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  002ca	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  002cd	75 0b		 jne	 SHORT $LN27@operator
  002cf	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv288[ebp+4]
  002d5	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002d8	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 785  :             _State |= ios_base::badbit;

  002da	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002dd	83 c8 04	 or	 eax, 4
  002e0	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 786  :         }
; 787  : 
; 788  :         if (_State == ios_base::goodbit) {

  002e3	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002e7	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 789  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002ed	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002ef	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002f2	83 e8 01	 sub	 eax, 1
  002f5	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002f8	83 d9 00	 sbb	 ecx, 0
  002fb	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002fe	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  00301	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00305	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  0030b	7f 0a		 jg	 SHORT $LN28@operator
  0030d	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00311	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 790  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00317	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0031a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0031f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00322	8b f4		 mov	 esi, esp
  00324	8b ca		 mov	 ecx, edx
  00326	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0032c	3b f4		 cmp	 esi, esp
  0032e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00333	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv289[ebp], al
  00339	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0033c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00341	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00344	8b f4		 mov	 esi, esp
  00346	8b ca		 mov	 ecx, edx
  00348	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0034e	3b f4		 cmp	 esi, esp
  00350	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00355	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  0035b	8b f4		 mov	 esi, esp
  0035d	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv289[ebp]
  00364	50		 push	 eax
  00365	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00371	3b f4		 cmp	 esi, esp
  00373	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00378	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv291[ebp], eax
  0037e	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv291[ebp]
  00384	89 8d d0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  0038a	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0038f	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00395	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0039b	52		 push	 edx
  0039c	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  003a2	50		 push	 eax
  003a3	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  003a8	83 c4 08	 add	 esp, 8
  003ab	0f b6 c8	 movzx	 ecx, al
  003ae	85 c9		 test	 ecx, ecx
  003b0	74 0b		 je	 SHORT $LN15@operator

; 791  :                     _State |= ios_base::badbit; // insertion failed, quit

  003b2	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003b5	83 c8 04	 or	 eax, 4
  003b8	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 792  :                     break;

  003bb	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 793  :                 }
; 794  :             }

  003bd	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 795  :         }
; 796  : 
; 797  :         _Ostr.width(0);

  003c2	8b f4		 mov	 esi, esp
  003c4	6a 00		 push	 0
  003c6	6a 00		 push	 0
  003c8	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  003cd	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003d0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003d3	8b ca		 mov	 ecx, edx
  003d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003db	3b f4		 cmp	 esi, esp
  003dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003e2	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 798  :         _CATCH_IO_(ios_base, _Ostr)

  003e4	8b f4		 mov	 esi, esp
  003e6	6a 01		 push	 1
  003e8	6a 04		 push	 4
  003ea	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ef	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003f2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003f5	8b ca		 mov	 ecx, edx
  003f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003fd	3b f4		 cmp	 esi, esp
  003ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00404	b8 00 00 00 00	 mov	 eax, $LN23@operator
  00409	c3		 ret	 0
$LN19@operator:
  0040a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00411	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00413	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 799  :     }
; 800  : 
; 801  :     _Ostr.setstate(_State);

  0041a	8b f4		 mov	 esi, esp
  0041c	6a 00		 push	 0
  0041e	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00421	50		 push	 eax
  00422	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00425	8b 11		 mov	 edx, DWORD PTR [ecx]
  00427	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0042a	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0042d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00433	3b f4		 cmp	 esi, esp
  00435	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 802  :     return _Ostr;

  0043a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0043d	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00443	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0044a	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0044d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00452	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 803  : }

  00458	52		 push	 edx
  00459	8b cd		 mov	 ecx, ebp
  0045b	50		 push	 eax
  0045c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00462	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00467	58		 pop	 eax
  00468	5a		 pop	 edx
  00469	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0046c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00473	59		 pop	 ecx
  00474	5f		 pop	 edi
  00475	5e		 pop	 esi
  00476	5b		 pop	 ebx
  00477	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0047a	33 cd		 xor	 ecx, ebp
  0047c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00481	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00487	3b ec		 cmp	 ebp, esp
  00489	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0048e	8b e5		 mov	 esp, ebp
  00490	5d		 pop	 ebp
  00491	c3		 ret	 0
  00492	66 90		 npad	 2
$LN32@operator:
  00494	01 00 00 00	 DD	 1
  00498	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  0049c	b4 ff ff ff	 DD	 -76			; ffffffb4H
  004a0	08 00 00 00	 DD	 8
  004a4	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  004a8	5f		 DB	 95			; 0000005fH
  004a9	4f		 DB	 79			; 0000004fH
  004aa	6b		 DB	 107			; 0000006bH
  004ab	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\User\Desktop\Everythin' for BSTU\Narkevich\All laboratory works\2-ой семестр\решения лбр\LBR_03\LBR_01\Congratulations.cpp
;	COMDAT ?numindays@@YAHH@Z
_TEXT	SEGMENT
_i$1 = -116						; size = 4
_Month$ = -104						; size = 48
_month$ = -48						; size = 4
_day$ = -36						; size = 4
_daynum$ = -24						; size = 4
_num$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_year$ = 8						; size = 4
?numindays@@YAHH@Z PROC					; numindays, COMDAT

; 2    : int numindays(int year) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d 88	 lea	 edi, DWORD PTR [ebp-120]
  0000f	b9 1e 00 00 00	 mov	 ecx, 30			; 0000001eH
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET __BA1596A1_Congratulations@cpp
  0002a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3    : 	int num, daynum, day, month = 1;

  0002f	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _month$[ebp], 1

; 4    : 	cout << "Введите порядковый номер дня, после чего будет выведено число и месяц, соответствующие порядковому номеру дня";

  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0GO@GJLMIJCE@?B?b?e?d?h?r?e?5?o?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?0?5?o@
  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00046	83 c4 08	 add	 esp, 8

; 5    : 	cin >> num;

  00049	8b f4		 mov	 esi, esp
  0004b	8d 45 f4	 lea	 eax, DWORD PTR _num$[ebp]
  0004e	50		 push	 eax
  0004f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 6    : 	daynum = num;

  00062	8b 45 f4	 mov	 eax, DWORD PTR _num$[ebp]
  00065	89 45 e8	 mov	 DWORD PTR _daynum$[ebp], eax

; 7    : 	if (leapOrNot(year) && (num > 366)) {

  00068	8b 45 08	 mov	 eax, DWORD PTR _year$[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?leapOrNot@@YA_NH@Z	; leapOrNot
  00071	83 c4 04	 add	 esp, 4
  00074	0f b6 c8	 movzx	 ecx, al
  00077	85 c9		 test	 ecx, ecx
  00079	74 39		 je	 SHORT $LN5@numindays
  0007b	81 7d f4 6e 01
	00 00		 cmp	 DWORD PTR _num$[ebp], 366 ; 0000016eH
  00082	7e 30		 jle	 SHORT $LN5@numindays

; 8    : 		cout << "Неверное количество дней" << endl;

  00084	8b f4		 mov	 esi, esp
  00086	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PODMPIC@?M?e?b?e?p?m?n?e?5?j?n?k?h?w?e?q?r?b?n?5?d?m?e?i@
  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0009b	83 c4 08	 add	 esp, 8
  0009e	8b c8		 mov	 ecx, eax
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000a6	3b f4		 cmp	 esi, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 9    : 		return 0;

  000ad	33 c0		 xor	 eax, eax
  000af	e9 c5 02 00 00	 jmp	 $LN1@numindays
$LN5@numindays:

; 10   : 	}
; 11   : 	if (leapOrNot(year) == false && (num > 355)) {

  000b4	8b 45 08	 mov	 eax, DWORD PTR _year$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?leapOrNot@@YA_NH@Z	; leapOrNot
  000bd	83 c4 04	 add	 esp, 4
  000c0	0f b6 c8	 movzx	 ecx, al
  000c3	85 c9		 test	 ecx, ecx
  000c5	75 32		 jne	 SHORT $LN6@numindays
  000c7	81 7d f4 63 01
	00 00		 cmp	 DWORD PTR _num$[ebp], 355 ; 00000163H
  000ce	7e 29		 jle	 SHORT $LN6@numindays

; 12   : 		cout << "Неверное количество дней" << endl;

  000d0	8b f4		 mov	 esi, esp
  000d2	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000d7	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PODMPIC@?M?e?b?e?p?m?n?e?5?j?n?k?h?w?e?q?r?b?n?5?d?m?e?i@
  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000e7	83 c4 08	 add	 esp, 8
  000ea	8b c8		 mov	 ecx, eax
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000f2	3b f4		 cmp	 esi, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@numindays:

; 13   : 	}
; 14   : 	if (num < 1) {

  000f9	83 7d f4 01	 cmp	 DWORD PTR _num$[ebp], 1
  000fd	7d 29		 jge	 SHORT $LN7@numindays

; 15   : 		cout << "Хорошая попытка, но нет)" << endl;

  000ff	8b f4		 mov	 esi, esp
  00101	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@COKNJCAO@?U?n?p?n?x?$OA?$PP?5?o?n?o?$PL?r?j?$OA?0?5?m?n?5?m?e?r?$CJ@
  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00116	83 c4 08	 add	 esp, 8
  00119	8b c8		 mov	 ecx, eax
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00121	3b f4		 cmp	 esi, esp
  00123	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@numindays:

; 16   : 	}
; 17   : 	int Month[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  00128	c7 45 98 1f 00
	00 00		 mov	 DWORD PTR _Month$[ebp], 31 ; 0000001fH
  0012f	c7 45 9c 1c 00
	00 00		 mov	 DWORD PTR _Month$[ebp+4], 28 ; 0000001cH
  00136	c7 45 a0 1f 00
	00 00		 mov	 DWORD PTR _Month$[ebp+8], 31 ; 0000001fH
  0013d	c7 45 a4 1e 00
	00 00		 mov	 DWORD PTR _Month$[ebp+12], 30 ; 0000001eH
  00144	c7 45 a8 1f 00
	00 00		 mov	 DWORD PTR _Month$[ebp+16], 31 ; 0000001fH
  0014b	c7 45 ac 1e 00
	00 00		 mov	 DWORD PTR _Month$[ebp+20], 30 ; 0000001eH
  00152	c7 45 b0 1f 00
	00 00		 mov	 DWORD PTR _Month$[ebp+24], 31 ; 0000001fH
  00159	c7 45 b4 1f 00
	00 00		 mov	 DWORD PTR _Month$[ebp+28], 31 ; 0000001fH
  00160	c7 45 b8 1e 00
	00 00		 mov	 DWORD PTR _Month$[ebp+32], 30 ; 0000001eH
  00167	c7 45 bc 1f 00
	00 00		 mov	 DWORD PTR _Month$[ebp+36], 31 ; 0000001fH
  0016e	c7 45 c0 1e 00
	00 00		 mov	 DWORD PTR _Month$[ebp+40], 30 ; 0000001eH
  00175	c7 45 c4 1f 00
	00 00		 mov	 DWORD PTR _Month$[ebp+44], 31 ; 0000001fH

; 18   : 	if (leapOrNot(year))

  0017c	8b 45 08	 mov	 eax, DWORD PTR _year$[ebp]
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 ?leapOrNot@@YA_NH@Z	; leapOrNot
  00185	83 c4 04	 add	 esp, 4
  00188	0f b6 c8	 movzx	 ecx, al
  0018b	85 c9		 test	 ecx, ecx
  0018d	74 1b		 je	 SHORT $LN8@numindays

; 19   : 		Month[1] += 1;

  0018f	b8 04 00 00 00	 mov	 eax, 4
  00194	c1 e0 00	 shl	 eax, 0
  00197	8b 4c 05 98	 mov	 ecx, DWORD PTR _Month$[ebp+eax]
  0019b	83 c1 01	 add	 ecx, 1
  0019e	ba 04 00 00 00	 mov	 edx, 4
  001a3	c1 e2 00	 shl	 edx, 0
  001a6	89 4c 15 98	 mov	 DWORD PTR _Month$[ebp+edx], ecx
$LN8@numindays:

; 20   : 	for (int i = 0; num > Month[i]; i++) {

  001aa	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  001b1	eb 09		 jmp	 SHORT $LN4@numindays
$LN2@numindays:
  001b3	8b 45 8c	 mov	 eax, DWORD PTR _i$1[ebp]
  001b6	83 c0 01	 add	 eax, 1
  001b9	89 45 8c	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@numindays:
  001bc	8b 45 8c	 mov	 eax, DWORD PTR _i$1[ebp]
  001bf	8b 4d f4	 mov	 ecx, DWORD PTR _num$[ebp]
  001c2	3b 4c 85 98	 cmp	 ecx, DWORD PTR _Month$[ebp+eax*4]
  001c6	7e 18		 jle	 SHORT $LN3@numindays

; 21   : 		num -= Month[i];

  001c8	8b 45 8c	 mov	 eax, DWORD PTR _i$1[ebp]
  001cb	8b 4d f4	 mov	 ecx, DWORD PTR _num$[ebp]
  001ce	2b 4c 85 98	 sub	 ecx, DWORD PTR _Month$[ebp+eax*4]
  001d2	89 4d f4	 mov	 DWORD PTR _num$[ebp], ecx

; 22   : 		month++;

  001d5	8b 45 d0	 mov	 eax, DWORD PTR _month$[ebp]
  001d8	83 c0 01	 add	 eax, 1
  001db	89 45 d0	 mov	 DWORD PTR _month$[ebp], eax

; 23   : 	}

  001de	eb d3		 jmp	 SHORT $LN2@numindays
$LN3@numindays:

; 24   : 	day = num;

  001e0	8b 45 f4	 mov	 eax, DWORD PTR _num$[ebp]
  001e3	89 45 dc	 mov	 DWORD PTR _day$[ebp], eax

; 25   : 	cout << "Вы указали дату: " << day << "-ое "; monthName(month);

  001e6	68 00 00 00 00	 push	 OFFSET ??_C@_04MIBODLF@?9?n?e?5@
  001eb	8b f4		 mov	 esi, esp
  001ed	8b 45 dc	 mov	 eax, DWORD PTR _day$[ebp]
  001f0	50		 push	 eax
  001f1	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IIKLDLKO@?B?$PL?5?s?j?$OA?g?$OA?k?h?5?d?$OA?r?s?3?5@
  001f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001fc	51		 push	 ecx
  001fd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00202	83 c4 08	 add	 esp, 8
  00205	8b c8		 mov	 ecx, eax
  00207	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0020d	3b f4		 cmp	 esi, esp
  0020f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00214	50		 push	 eax
  00215	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0021a	83 c4 08	 add	 esp, 8
  0021d	8b 45 d0	 mov	 eax, DWORD PTR _month$[ebp]
  00220	50		 push	 eax
  00221	e8 00 00 00 00	 call	 ?monthName@@YAXH@Z	; monthName
  00226	83 c4 04	 add	 esp, 4

; 26   : 
; 27   : 
; 28   : 	if (daynum == 256) {

  00229	81 7d e8 00 01
	00 00		 cmp	 DWORD PTR _daynum$[ebp], 256 ; 00000100H
  00230	75 49		 jne	 SHORT $LN9@numindays

; 29   : 		cout << "	С днем программиста!!! Программирование это круто!!!" << endl << endl;

  00232	8b f4		 mov	 esi, esp
  00234	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00239	8b fc		 mov	 edi, esp
  0023b	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00240	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@FOGMOELP@?7?Q?5?d?m?e?l?5?o?p?n?c?p?$OA?l?l?h?q?r?$OA?$CB?$CB?$CB?5?O?p?n?c?p?$OA?l@
  00245	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0024a	50		 push	 eax
  0024b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00250	83 c4 08	 add	 esp, 8
  00253	8b c8		 mov	 ecx, eax
  00255	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0025b	3b fc		 cmp	 edi, esp
  0025d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00262	8b c8		 mov	 ecx, eax
  00264	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0026a	3b f4		 cmp	 esi, esp
  0026c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 30   : 		return 1;

  00271	b8 01 00 00 00	 mov	 eax, 1
  00276	e9 fe 00 00 00	 jmp	 $LN1@numindays
$LN9@numindays:

; 31   : 	}
; 32   : 
; 33   : 	if (day == 8 && month == 3) {

  0027b	83 7d dc 08	 cmp	 DWORD PTR _day$[ebp], 8
  0027f	75 4f		 jne	 SHORT $LN10@numindays
  00281	83 7d d0 03	 cmp	 DWORD PTR _month$[ebp], 3
  00285	75 49		 jne	 SHORT $LN10@numindays

; 34   : 		cout << "	В этот долгожданный день празднуется Женский день." << endl << endl; // 67 68

  00287	8b f4		 mov	 esi, esp
  00289	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0028e	8b fc		 mov	 edi, esp
  00290	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00295	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@POPDDBCO@?7?B?5?$PN?r?n?r?5?d?n?k?c?n?f?d?$OA?m?m?$PL?i?5?d?e?m?$PM?5?o?p?$OA?g?d@
  0029a	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0029f	50		 push	 eax
  002a0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002a5	83 c4 08	 add	 esp, 8
  002a8	8b c8		 mov	 ecx, eax
  002aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  002b0	3b fc		 cmp	 edi, esp
  002b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b7	8b c8		 mov	 ecx, eax
  002b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  002bf	3b f4		 cmp	 esi, esp
  002c1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 35   : 		return 1;

  002c6	b8 01 00 00 00	 mov	 eax, 1
  002cb	e9 a9 00 00 00	 jmp	 $LN1@numindays
$LN10@numindays:

; 36   : 	}
; 37   : 	if (day == 1 && month == 6) {

  002d0	83 7d dc 01	 cmp	 DWORD PTR _day$[ebp], 1
  002d4	75 4c		 jne	 SHORT $LN11@numindays
  002d6	83 7d d0 06	 cmp	 DWORD PTR _month$[ebp], 6
  002da	75 46		 jne	 SHORT $LN11@numindays

; 38   : 		cout << "	Ураааааааааааааа!!! Первый денб лета!" << endl << endl;

  002dc	8b f4		 mov	 esi, esp
  002de	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002e3	8b fc		 mov	 edi, esp
  002e5	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002ea	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@PCMDKMDJ@?7?S?p?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$OA?$CB?$CB?$CB?5?O?e?p?b?$PL?i?5?d?e?m@
  002ef	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002f4	50		 push	 eax
  002f5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002fa	83 c4 08	 add	 esp, 8
  002fd	8b c8		 mov	 ecx, eax
  002ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00305	3b fc		 cmp	 edi, esp
  00307	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0030c	8b c8		 mov	 ecx, eax
  0030e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00314	3b f4		 cmp	 esi, esp
  00316	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 39   : 		return 1;

  0031b	b8 01 00 00 00	 mov	 eax, 1
  00320	eb 57		 jmp	 SHORT $LN1@numindays
$LN11@numindays:

; 40   : 	}
; 41   : 
; 42   : 	if (day == 1 && month == 1) {

  00322	83 7d dc 01	 cmp	 DWORD PTR _day$[ebp], 1
  00326	75 4c		 jne	 SHORT $LN12@numindays
  00328	83 7d d0 01	 cmp	 DWORD PTR _month$[ebp], 1
  0032c	75 46		 jne	 SHORT $LN12@numindays

; 43   : 		cout << "	С Новым годом! С новым счастьем!" << endl << endl;

  0032e	8b f4		 mov	 esi, esp
  00330	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00335	8b fc		 mov	 edi, esp
  00337	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0033c	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@OKGENNBC@?7?Q?5?M?n?b?$PL?l?5?c?n?d?n?l?$CB?5?Q?5?m?n?b?$PL?l?5?q?w?$OA?q?r?$PM?e@
  00341	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00346	50		 push	 eax
  00347	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0034c	83 c4 08	 add	 esp, 8
  0034f	8b c8		 mov	 ecx, eax
  00351	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00357	3b fc		 cmp	 edi, esp
  00359	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0035e	8b c8		 mov	 ecx, eax
  00360	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00366	3b f4		 cmp	 esi, esp
  00368	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 44   : 		return 1;

  0036d	b8 01 00 00 00	 mov	 eax, 1
  00372	eb 05		 jmp	 SHORT $LN1@numindays
$LN12@numindays:

; 45   : 	}
; 46   : 
; 47   : 	return 1;

  00374	b8 01 00 00 00	 mov	 eax, 1
$LN1@numindays:

; 48   : }

  00379	52		 push	 edx
  0037a	8b cd		 mov	 ecx, ebp
  0037c	50		 push	 eax
  0037d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@numindays
  00383	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00388	58		 pop	 eax
  00389	5a		 pop	 edx
  0038a	5f		 pop	 edi
  0038b	5e		 pop	 esi
  0038c	5b		 pop	 ebx
  0038d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00390	33 cd		 xor	 ecx, ebp
  00392	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00397	81 c4 38 01 00
	00		 add	 esp, 312		; 00000138H
  0039d	3b ec		 cmp	 ebp, esp
  0039f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a4	8b e5		 mov	 esp, ebp
  003a6	5d		 pop	 ebp
  003a7	c3		 ret	 0
$LN17@numindays:
  003a8	02 00 00 00	 DD	 2
  003ac	00 00 00 00	 DD	 $LN16@numindays
$LN16@numindays:
  003b0	f4 ff ff ff	 DD	 -12			; fffffff4H
  003b4	04 00 00 00	 DD	 4
  003b8	00 00 00 00	 DD	 $LN14@numindays
  003bc	98 ff ff ff	 DD	 -104			; ffffff98H
  003c0	30 00 00 00	 DD	 48			; 00000030H
  003c4	00 00 00 00	 DD	 $LN15@numindays
$LN15@numindays:
  003c8	4d		 DB	 77			; 0000004dH
  003c9	6f		 DB	 111			; 0000006fH
  003ca	6e		 DB	 110			; 0000006eH
  003cb	74		 DB	 116			; 00000074H
  003cc	68		 DB	 104			; 00000068H
  003cd	00		 DB	 0
$LN14@numindays:
  003ce	6e		 DB	 110			; 0000006eH
  003cf	75		 DB	 117			; 00000075H
  003d0	6d		 DB	 109			; 0000006dH
  003d1	00		 DB	 0
?numindays@@YAHH@Z ENDP					; numindays
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 488  :     _NODISCARD static constexpr int_type eof() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 489  :         return static_cast<int_type>(EOF);

  00021	83 c8 ff	 or	 eax, -1

; 490  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 480  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d fc	 lea	 edi, DWORD PTR [ebp-4]
  0000f	b9 01 00 00 00	 mov	 ecx, 1
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 481  :         return _Left == _Right;

  00025	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002b	8b 10		 mov	 edx, DWORD PTR [eax]
  0002d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002f	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00031	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  0003b	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0003d	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00047	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 482  :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 402  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B71DB0E4_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 403  :         // find length of null-terminated string
; 404  : #if _HAS_CXX17
; 405  : #ifdef __cpp_char8_t
; 406  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 407  : #if _HAS_U8_INTRINSICS
; 408  :             return __builtin_u8strlen(_First);
; 409  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 410  :             return _Primary_char_traits::length(_First);
; 411  : #endif // _HAS_U8_INTRINSICS
; 412  :         } else
; 413  : #endif // __cpp_char8_t
; 414  :         {
; 415  :             return __builtin_strlen(_First);
; 416  :         }
; 417  : #else // _HAS_CXX17
; 418  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _strlen
  0002a	83 c4 04	 add	 esp, 4

; 419  : #endif // _HAS_CXX17
; 420  :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\User\Desktop\Everythin' for BSTU\Narkevich\All laboratory works\2-ой семестр\решения лбр\LBR_03\LBR_01\Congratulations.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __BA1596A1_Congratulations@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\User\Desktop\Everythin' for BSTU\Narkevich\All laboratory works\2-ой семестр\решения лбр\LBR_03\LBR_01\Congratulations.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __BA1596A1_Congratulations@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
